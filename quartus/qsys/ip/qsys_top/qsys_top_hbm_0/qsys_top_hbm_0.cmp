	component qsys_top_hbm_0 is
		port (
			pll_ref_clk                                       : in    std_logic                      := 'X';             -- clk
			ext_core_clk                                      : in    std_logic                      := 'X';             -- clk
			ext_core_clk_locked                               : in    std_logic                      := 'X';             -- export
			wmcrst_n_in                                       : in    std_logic                      := 'X';             -- reset_n
			hbm_only_reset_in                                 : in    std_logic                      := 'X';             -- reset
			local_cal_success                                 : out   std_logic;                                         -- local_cal_success
			local_cal_fail                                    : out   std_logic;                                         -- local_cal_fail
			cal_lat                                           : out   std_logic_vector(2 downto 0);                      -- cal_lat
			ck_t_0                                            : out   std_logic;                                         -- ck_t
			ck_c_0                                            : out   std_logic;                                         -- ck_c
			cke_0                                             : out   std_logic;                                         -- cke
			c_0                                               : out   std_logic_vector(7 downto 0);                      -- c
			r_0                                               : out   std_logic_vector(5 downto 0);                      -- r
			dq_0                                              : inout std_logic_vector(127 downto 0) := (others => 'X'); -- dq
			dm_0                                              : inout std_logic_vector(15 downto 0)  := (others => 'X'); -- dm
			dbi_0                                             : inout std_logic_vector(15 downto 0)  := (others => 'X'); -- dbi
			par_0                                             : inout std_logic_vector(3 downto 0)   := (others => 'X'); -- par
			derr_0                                            : inout std_logic_vector(3 downto 0)   := (others => 'X'); -- derr
			rdqs_t_0                                          : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- rdqs_t
			rdqs_c_0                                          : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- rdqs_c
			wdqs_t_0                                          : out   std_logic_vector(3 downto 0);                      -- wdqs_t
			wdqs_c_0                                          : out   std_logic_vector(3 downto 0);                      -- wdqs_c
			rd_0                                              : inout std_logic_vector(7 downto 0)   := (others => 'X'); -- rd
			rr_0                                              : out   std_logic;                                         -- rr
			rc_0                                              : out   std_logic;                                         -- rc
			aerr_0                                            : in    std_logic                      := 'X';             -- aerr
			cattrip                                           : in    std_logic                      := 'X';             -- cattrip
			temp                                              : in    std_logic_vector(2 downto 0)   := (others => 'X'); -- temp
			wso                                               : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- wso
			reset_n                                           : out   std_logic;                                         -- reset_n
			wrst_n                                            : out   std_logic;                                         -- wrst_n
			wrck                                              : out   std_logic;                                         -- wrck
			shiftwr                                           : out   std_logic;                                         -- shiftwr
			capturewr                                         : out   std_logic;                                         -- capturewr
			updatewr                                          : out   std_logic;                                         -- updatewr
			selectwir                                         : out   std_logic;                                         -- selectwir
			wsi                                               : out   std_logic;                                         -- wsi
			wmc_clk_0_clk                                     : out   std_logic;                                         -- clk
			phy_clk_0_clk                                     : out   std_logic;                                         -- clk
			wmcrst_n_0_reset_n                                : out   std_logic;                                         -- reset_n
			ctrl_amm_0_1_waitrequest_n                        : out   std_logic;                                         -- waitrequest_n
			ctrl_amm_0_1_read                                 : in    std_logic                      := 'X';             -- read
			ctrl_amm_0_1_write                                : in    std_logic                      := 'X';             -- write
			ctrl_amm_0_1_address                              : in    std_logic_vector(28 downto 0)  := (others => 'X'); -- address
			ctrl_amm_0_1_readdata                             : out   std_logic_vector(255 downto 0);                    -- readdata
			ctrl_amm_0_1_writedata                            : in    std_logic_vector(255 downto 0) := (others => 'X'); -- writedata
			ctrl_amm_0_1_burstcount                           : in    std_logic_vector(6 downto 0)   := (others => 'X'); -- burstcount
			ctrl_amm_0_1_byteenable                           : in    std_logic_vector(31 downto 0)  := (others => 'X'); -- byteenable
			ctrl_amm_0_1_readdatavalid                        : out   std_logic;                                         -- readdatavalid
			ctrl_amm_0_0_waitrequest_n                        : out   std_logic;                                         -- waitrequest_n
			ctrl_amm_0_0_read                                 : in    std_logic                      := 'X';             -- read
			ctrl_amm_0_0_write                                : in    std_logic                      := 'X';             -- write
			ctrl_amm_0_0_address                              : in    std_logic_vector(28 downto 0)  := (others => 'X'); -- address
			ctrl_amm_0_0_readdata                             : out   std_logic_vector(255 downto 0);                    -- readdata
			ctrl_amm_0_0_writedata                            : in    std_logic_vector(255 downto 0) := (others => 'X'); -- writedata
			ctrl_amm_0_0_burstcount                           : in    std_logic_vector(6 downto 0)   := (others => 'X'); -- burstcount
			ctrl_amm_0_0_byteenable                           : in    std_logic_vector(31 downto 0)  := (others => 'X'); -- byteenable
			ctrl_amm_0_0_readdatavalid                        : out   std_logic;                                         -- readdatavalid
			ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror : out   std_logic;                                         -- ctrl_ecc_readdataerror
			ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror : out   std_logic;                                         -- ctrl_ecc_readdataerror
			apb_0_ur_paddr                                    : in    std_logic_vector(15 downto 0)  := (others => 'X'); -- ur_paddr
			apb_0_ur_psel                                     : in    std_logic                      := 'X';             -- ur_psel
			apb_0_ur_penable                                  : in    std_logic                      := 'X';             -- ur_penable
			apb_0_ur_pwrite                                   : in    std_logic                      := 'X';             -- ur_pwrite
			apb_0_ur_pwdata                                   : in    std_logic_vector(15 downto 0)  := (others => 'X'); -- ur_pwdata
			apb_0_ur_pstrb                                    : in    std_logic_vector(1 downto 0)   := (others => 'X'); -- ur_pstrb
			apb_0_ur_prready                                  : out   std_logic;                                         -- ur_prready
			apb_0_ur_prdata                                   : out   std_logic_vector(15 downto 0)                      -- ur_prdata
		);
	end component qsys_top_hbm_0;

