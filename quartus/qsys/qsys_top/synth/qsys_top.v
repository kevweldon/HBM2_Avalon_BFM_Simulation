// qsys_top.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top (
		input  wire         hbm_top_pll_ref_clk_clk,          //       hbm_top_pll_ref_clk.clk
		input  wire         hbm_top_wmcrst_n_in_reset_n,      //       hbm_top_wmcrst_n_in.reset_n
		input  wire         hbm_top_hbm_only_reset_in_reset,  // hbm_top_hbm_only_reset_in.reset
		output wire         hbm_top_status_local_cal_success, //            hbm_top_status.local_cal_success
		output wire         hbm_top_status_local_cal_fail,    //                          .local_cal_fail
		output wire         mem_0_ck_t,                       //                     mem_0.ck_t
		output wire         mem_0_ck_c,                       //                          .ck_c
		output wire         mem_0_cke,                        //                          .cke
		output wire [7:0]   mem_0_c,                          //                          .c
		output wire [5:0]   mem_0_r,                          //                          .r
		inout  wire [127:0] mem_0_dq,                         //                          .dq
		inout  wire [15:0]  mem_0_dm,                         //                          .dm
		inout  wire [15:0]  mem_0_dbi,                        //                          .dbi
		inout  wire [3:0]   mem_0_par,                        //                          .par
		inout  wire [3:0]   mem_0_derr,                       //                          .derr
		input  wire [3:0]   mem_0_rdqs_t,                     //                          .rdqs_t
		input  wire [3:0]   mem_0_rdqs_c,                     //                          .rdqs_c
		output wire [3:0]   mem_0_wdqs_t,                     //                          .wdqs_t
		output wire [3:0]   mem_0_wdqs_c,                     //                          .wdqs_c
		inout  wire [7:0]   mem_0_rd,                         //                          .rd
		output wire         mem_0_rr,                         //                          .rr
		output wire         mem_0_rc,                         //                          .rc
		input  wire         mem_0_aerr,                       //                          .aerr
		input  wire         m2u_bridge_cattrip,               //                m2u_bridge.cattrip
		input  wire [2:0]   m2u_bridge_temp,                  //                          .temp
		input  wire [7:0]   m2u_bridge_wso,                   //                          .wso
		output wire         m2u_bridge_reset_n,               //                          .reset_n
		output wire         m2u_bridge_wrst_n,                //                          .wrst_n
		output wire         m2u_bridge_wrck,                  //                          .wrck
		output wire         m2u_bridge_shiftwr,               //                          .shiftwr
		output wire         m2u_bridge_capturewr,             //                          .capturewr
		output wire         m2u_bridge_updatewr,              //                          .updatewr
		output wire         m2u_bridge_selectwir,             //                          .selectwir
		output wire         m2u_bridge_wsi,                   //                          .wsi
		input  wire [15:0]  hbm_top_apb_0_ur_paddr,           //             hbm_top_apb_0.ur_paddr
		input  wire         hbm_top_apb_0_ur_psel,            //                          .ur_psel
		input  wire         hbm_top_apb_0_ur_penable,         //                          .ur_penable
		input  wire         hbm_top_apb_0_ur_pwrite,          //                          .ur_pwrite
		input  wire [15:0]  hbm_top_apb_0_ur_pwdata,          //                          .ur_pwdata
		input  wire [1:0]   hbm_top_apb_0_ur_pstrb,           //                          .ur_pstrb
		output wire         hbm_top_apb_0_ur_prready,         //                          .ur_prready
		output wire [15:0]  hbm_top_apb_0_ur_prdata,          //                          .ur_prdata
		input  wire         reset_reset,                      //                     reset.reset
		input  wire         top_core_clk_iopll_reset_reset,   //  top_core_clk_iopll_reset.reset
		input  wire         top_core_clk_iopll_refclk_clk     // top_core_clk_iopll_refclk.clk
	);

	wire          top_core_clk_iopll_outclk0_clk;                       // top_core_clk_iopll:outclk_0 -> hbm_top:ext_core_clk
	wire          hbm_top_wmc_clk_0_clk;                                // hbm_top:wmc_clk_0_clk -> [ch_0_0_master:clk, ch_0_1_master:clk, mm_interconnect_0:hbm_top_wmc_clk_0_clk, rst_controller:clk, rst_controller_001:clk, rst_controller_002:clk]
	wire          top_core_clk_iopll_locked_export;                     // top_core_clk_iopll:locked -> hbm_top:ext_core_clk_locked
	wire  [255:0] ch_0_0_master_m0_readdata;                            // mm_interconnect_0:ch_0_0_master_m0_readdata -> ch_0_0_master:avm_readdata
	wire          ch_0_0_master_m0_waitrequest;                         // mm_interconnect_0:ch_0_0_master_m0_waitrequest -> ch_0_0_master:avm_waitrequest
	wire   [63:0] ch_0_0_master_m0_address;                             // ch_0_0_master:avm_address -> mm_interconnect_0:ch_0_0_master_m0_address
	wire          ch_0_0_master_m0_read;                                // ch_0_0_master:avm_read -> mm_interconnect_0:ch_0_0_master_m0_read
	wire   [31:0] ch_0_0_master_m0_byteenable;                          // ch_0_0_master:avm_byteenable -> mm_interconnect_0:ch_0_0_master_m0_byteenable
	wire          ch_0_0_master_m0_readdatavalid;                       // mm_interconnect_0:ch_0_0_master_m0_readdatavalid -> ch_0_0_master:avm_readdatavalid
	wire  [255:0] ch_0_0_master_m0_writedata;                           // ch_0_0_master:avm_writedata -> mm_interconnect_0:ch_0_0_master_m0_writedata
	wire          ch_0_0_master_m0_write;                               // ch_0_0_master:avm_write -> mm_interconnect_0:ch_0_0_master_m0_write
	wire  [255:0] ch_0_1_master_m0_readdata;                            // mm_interconnect_0:ch_0_1_master_m0_readdata -> ch_0_1_master:avm_readdata
	wire          ch_0_1_master_m0_waitrequest;                         // mm_interconnect_0:ch_0_1_master_m0_waitrequest -> ch_0_1_master:avm_waitrequest
	wire   [63:0] ch_0_1_master_m0_address;                             // ch_0_1_master:avm_address -> mm_interconnect_0:ch_0_1_master_m0_address
	wire          ch_0_1_master_m0_read;                                // ch_0_1_master:avm_read -> mm_interconnect_0:ch_0_1_master_m0_read
	wire   [31:0] ch_0_1_master_m0_byteenable;                          // ch_0_1_master:avm_byteenable -> mm_interconnect_0:ch_0_1_master_m0_byteenable
	wire          ch_0_1_master_m0_readdatavalid;                       // mm_interconnect_0:ch_0_1_master_m0_readdatavalid -> ch_0_1_master:avm_readdatavalid
	wire  [255:0] ch_0_1_master_m0_writedata;                           // ch_0_1_master:avm_writedata -> mm_interconnect_0:ch_0_1_master_m0_writedata
	wire          ch_0_1_master_m0_write;                               // ch_0_1_master:avm_write -> mm_interconnect_0:ch_0_1_master_m0_write
	wire  [255:0] mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdata;      // hbm_top:ctrl_amm_0_0_readdata -> mm_interconnect_0:hbm_top_ctrl_amm_0_0_readdata
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_0_waitrequest;   // hbm_top:ctrl_amm_0_0_waitrequest_n -> mm_interconnect_0:hbm_top_ctrl_amm_0_0_waitrequest
	wire   [28:0] mm_interconnect_0_hbm_top_ctrl_amm_0_0_address;       // mm_interconnect_0:hbm_top_ctrl_amm_0_0_address -> hbm_top:ctrl_amm_0_0_address
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_0_read;          // mm_interconnect_0:hbm_top_ctrl_amm_0_0_read -> hbm_top:ctrl_amm_0_0_read
	wire   [31:0] mm_interconnect_0_hbm_top_ctrl_amm_0_0_byteenable;    // mm_interconnect_0:hbm_top_ctrl_amm_0_0_byteenable -> hbm_top:ctrl_amm_0_0_byteenable
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdatavalid; // hbm_top:ctrl_amm_0_0_readdatavalid -> mm_interconnect_0:hbm_top_ctrl_amm_0_0_readdatavalid
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_0_write;         // mm_interconnect_0:hbm_top_ctrl_amm_0_0_write -> hbm_top:ctrl_amm_0_0_write
	wire  [255:0] mm_interconnect_0_hbm_top_ctrl_amm_0_0_writedata;     // mm_interconnect_0:hbm_top_ctrl_amm_0_0_writedata -> hbm_top:ctrl_amm_0_0_writedata
	wire    [6:0] mm_interconnect_0_hbm_top_ctrl_amm_0_0_burstcount;    // mm_interconnect_0:hbm_top_ctrl_amm_0_0_burstcount -> hbm_top:ctrl_amm_0_0_burstcount
	wire  [255:0] mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdata;      // hbm_top:ctrl_amm_0_1_readdata -> mm_interconnect_0:hbm_top_ctrl_amm_0_1_readdata
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_1_waitrequest;   // hbm_top:ctrl_amm_0_1_waitrequest_n -> mm_interconnect_0:hbm_top_ctrl_amm_0_1_waitrequest
	wire   [28:0] mm_interconnect_0_hbm_top_ctrl_amm_0_1_address;       // mm_interconnect_0:hbm_top_ctrl_amm_0_1_address -> hbm_top:ctrl_amm_0_1_address
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_1_read;          // mm_interconnect_0:hbm_top_ctrl_amm_0_1_read -> hbm_top:ctrl_amm_0_1_read
	wire   [31:0] mm_interconnect_0_hbm_top_ctrl_amm_0_1_byteenable;    // mm_interconnect_0:hbm_top_ctrl_amm_0_1_byteenable -> hbm_top:ctrl_amm_0_1_byteenable
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdatavalid; // hbm_top:ctrl_amm_0_1_readdatavalid -> mm_interconnect_0:hbm_top_ctrl_amm_0_1_readdatavalid
	wire          mm_interconnect_0_hbm_top_ctrl_amm_0_1_write;         // mm_interconnect_0:hbm_top_ctrl_amm_0_1_write -> hbm_top:ctrl_amm_0_1_write
	wire  [255:0] mm_interconnect_0_hbm_top_ctrl_amm_0_1_writedata;     // mm_interconnect_0:hbm_top_ctrl_amm_0_1_writedata -> hbm_top:ctrl_amm_0_1_writedata
	wire    [6:0] mm_interconnect_0_hbm_top_ctrl_amm_0_1_burstcount;    // mm_interconnect_0:hbm_top_ctrl_amm_0_1_burstcount -> hbm_top:ctrl_amm_0_1_burstcount
	wire          rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [ch_0_0_master:reset, ch_0_1_master:reset]
	wire          reset_out_reset_reset;                                // reset:out_reset -> [rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire          rst_controller_001_reset_out_reset;                   // rst_controller_001:reset_out -> mm_interconnect_0:ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset
	wire          rst_controller_002_reset_out_reset;                   // rst_controller_002:reset_out -> [mm_interconnect_0:hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset]
	wire          hbm_top_wmcrst_n_0_reset;                             // hbm_top:wmcrst_n_0_reset_n -> rst_controller_002:reset_in0

	ch_0_0_master ch_0_0_master (
		.clk               (hbm_top_wmc_clk_0_clk),          //   input,    width = 1,       clk.clk
		.reset             (rst_controller_reset_out_reset), //   input,    width = 1, clk_reset.reset
		.avm_address       (ch_0_0_master_m0_address),       //  output,   width = 64,        m0.address
		.avm_readdata      (ch_0_0_master_m0_readdata),      //   input,  width = 256,          .readdata
		.avm_writedata     (ch_0_0_master_m0_writedata),     //  output,  width = 256,          .writedata
		.avm_waitrequest   (ch_0_0_master_m0_waitrequest),   //   input,    width = 1,          .waitrequest
		.avm_write         (ch_0_0_master_m0_write),         //  output,    width = 1,          .write
		.avm_read          (ch_0_0_master_m0_read),          //  output,    width = 1,          .read
		.avm_byteenable    (ch_0_0_master_m0_byteenable),    //  output,   width = 32,          .byteenable
		.avm_readdatavalid (ch_0_0_master_m0_readdatavalid)  //   input,    width = 1,          .readdatavalid
	);

	ch_0_0_master ch_0_1_master (
		.clk               (hbm_top_wmc_clk_0_clk),          //   input,    width = 1,       clk.clk
		.reset             (rst_controller_reset_out_reset), //   input,    width = 1, clk_reset.reset
		.avm_address       (ch_0_1_master_m0_address),       //  output,   width = 64,        m0.address
		.avm_readdata      (ch_0_1_master_m0_readdata),      //   input,  width = 256,          .readdata
		.avm_writedata     (ch_0_1_master_m0_writedata),     //  output,  width = 256,          .writedata
		.avm_waitrequest   (ch_0_1_master_m0_waitrequest),   //   input,    width = 1,          .waitrequest
		.avm_write         (ch_0_1_master_m0_write),         //  output,    width = 1,          .write
		.avm_read          (ch_0_1_master_m0_read),          //  output,    width = 1,          .read
		.avm_byteenable    (ch_0_1_master_m0_byteenable),    //  output,   width = 32,          .byteenable
		.avm_readdatavalid (ch_0_1_master_m0_readdatavalid)  //   input,    width = 1,          .readdatavalid
	);

	qsys_top_hbm_0 hbm_top (
		.pll_ref_clk                                       (hbm_top_pll_ref_clk_clk),                              //   input,    width = 1,                pll_ref_clk.clk
		.ext_core_clk                                      (top_core_clk_iopll_outclk0_clk),                       //   input,    width = 1,               ext_core_clk.clk
		.ext_core_clk_locked                               (top_core_clk_iopll_locked_export),                     //   input,    width = 1,        ext_core_clk_locked.export
		.wmcrst_n_in                                       (hbm_top_wmcrst_n_in_reset_n),                          //   input,    width = 1,                wmcrst_n_in.reset_n
		.hbm_only_reset_in                                 (hbm_top_hbm_only_reset_in_reset),                      //   input,    width = 1,          hbm_only_reset_in.reset
		.local_cal_success                                 (hbm_top_status_local_cal_success),                     //  output,    width = 1,                     status.local_cal_success
		.local_cal_fail                                    (hbm_top_status_local_cal_fail),                        //  output,    width = 1,                           .local_cal_fail
		.cal_lat                                           (),                                                     //  output,    width = 3,                    cal_lat.cal_lat
		.ck_t_0                                            (mem_0_ck_t),                                           //  output,    width = 1,                      mem_0.ck_t
		.ck_c_0                                            (mem_0_ck_c),                                           //  output,    width = 1,                           .ck_c
		.cke_0                                             (mem_0_cke),                                            //  output,    width = 1,                           .cke
		.c_0                                               (mem_0_c),                                              //  output,    width = 8,                           .c
		.r_0                                               (mem_0_r),                                              //  output,    width = 6,                           .r
		.dq_0                                              (mem_0_dq),                                             //   inout,  width = 128,                           .dq
		.dm_0                                              (mem_0_dm),                                             //   inout,   width = 16,                           .dm
		.dbi_0                                             (mem_0_dbi),                                            //   inout,   width = 16,                           .dbi
		.par_0                                             (mem_0_par),                                            //   inout,    width = 4,                           .par
		.derr_0                                            (mem_0_derr),                                           //   inout,    width = 4,                           .derr
		.rdqs_t_0                                          (mem_0_rdqs_t),                                         //   input,    width = 4,                           .rdqs_t
		.rdqs_c_0                                          (mem_0_rdqs_c),                                         //   input,    width = 4,                           .rdqs_c
		.wdqs_t_0                                          (mem_0_wdqs_t),                                         //  output,    width = 4,                           .wdqs_t
		.wdqs_c_0                                          (mem_0_wdqs_c),                                         //  output,    width = 4,                           .wdqs_c
		.rd_0                                              (mem_0_rd),                                             //   inout,    width = 8,                           .rd
		.rr_0                                              (mem_0_rr),                                             //  output,    width = 1,                           .rr
		.rc_0                                              (mem_0_rc),                                             //  output,    width = 1,                           .rc
		.aerr_0                                            (mem_0_aerr),                                           //   input,    width = 1,                           .aerr
		.cattrip                                           (m2u_bridge_cattrip),                                   //   input,    width = 1,                 m2u_bridge.cattrip
		.temp                                              (m2u_bridge_temp),                                      //   input,    width = 3,                           .temp
		.wso                                               (m2u_bridge_wso),                                       //   input,    width = 8,                           .wso
		.reset_n                                           (m2u_bridge_reset_n),                                   //  output,    width = 1,                           .reset_n
		.wrst_n                                            (m2u_bridge_wrst_n),                                    //  output,    width = 1,                           .wrst_n
		.wrck                                              (m2u_bridge_wrck),                                      //  output,    width = 1,                           .wrck
		.shiftwr                                           (m2u_bridge_shiftwr),                                   //  output,    width = 1,                           .shiftwr
		.capturewr                                         (m2u_bridge_capturewr),                                 //  output,    width = 1,                           .capturewr
		.updatewr                                          (m2u_bridge_updatewr),                                  //  output,    width = 1,                           .updatewr
		.selectwir                                         (m2u_bridge_selectwir),                                 //  output,    width = 1,                           .selectwir
		.wsi                                               (m2u_bridge_wsi),                                       //  output,    width = 1,                           .wsi
		.wmc_clk_0_clk                                     (hbm_top_wmc_clk_0_clk),                                //  output,    width = 1,                  wmc_clk_0.clk
		.phy_clk_0_clk                                     (),                                                     //  output,    width = 1,                  phy_clk_0.clk
		.wmcrst_n_0_reset_n                                (hbm_top_wmcrst_n_0_reset),                             //  output,    width = 1,                 wmcrst_n_0.reset_n
		.ctrl_amm_0_1_waitrequest_n                        (mm_interconnect_0_hbm_top_ctrl_amm_0_1_waitrequest),   //  output,    width = 1,               ctrl_amm_0_1.waitrequest_n
		.ctrl_amm_0_1_read                                 (mm_interconnect_0_hbm_top_ctrl_amm_0_1_read),          //   input,    width = 1,                           .read
		.ctrl_amm_0_1_write                                (mm_interconnect_0_hbm_top_ctrl_amm_0_1_write),         //   input,    width = 1,                           .write
		.ctrl_amm_0_1_address                              (mm_interconnect_0_hbm_top_ctrl_amm_0_1_address),       //   input,   width = 29,                           .address
		.ctrl_amm_0_1_readdata                             (mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdata),      //  output,  width = 256,                           .readdata
		.ctrl_amm_0_1_writedata                            (mm_interconnect_0_hbm_top_ctrl_amm_0_1_writedata),     //   input,  width = 256,                           .writedata
		.ctrl_amm_0_1_burstcount                           (mm_interconnect_0_hbm_top_ctrl_amm_0_1_burstcount),    //   input,    width = 7,                           .burstcount
		.ctrl_amm_0_1_byteenable                           (mm_interconnect_0_hbm_top_ctrl_amm_0_1_byteenable),    //   input,   width = 32,                           .byteenable
		.ctrl_amm_0_1_readdatavalid                        (mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdatavalid), //  output,    width = 1,                           .readdatavalid
		.ctrl_amm_0_0_waitrequest_n                        (mm_interconnect_0_hbm_top_ctrl_amm_0_0_waitrequest),   //  output,    width = 1,               ctrl_amm_0_0.waitrequest_n
		.ctrl_amm_0_0_read                                 (mm_interconnect_0_hbm_top_ctrl_amm_0_0_read),          //   input,    width = 1,                           .read
		.ctrl_amm_0_0_write                                (mm_interconnect_0_hbm_top_ctrl_amm_0_0_write),         //   input,    width = 1,                           .write
		.ctrl_amm_0_0_address                              (mm_interconnect_0_hbm_top_ctrl_amm_0_0_address),       //   input,   width = 29,                           .address
		.ctrl_amm_0_0_readdata                             (mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdata),      //  output,  width = 256,                           .readdata
		.ctrl_amm_0_0_writedata                            (mm_interconnect_0_hbm_top_ctrl_amm_0_0_writedata),     //   input,  width = 256,                           .writedata
		.ctrl_amm_0_0_burstcount                           (mm_interconnect_0_hbm_top_ctrl_amm_0_0_burstcount),    //   input,    width = 7,                           .burstcount
		.ctrl_amm_0_0_byteenable                           (mm_interconnect_0_hbm_top_ctrl_amm_0_0_byteenable),    //   input,   width = 32,                           .byteenable
		.ctrl_amm_0_0_readdatavalid                        (mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdatavalid), //  output,    width = 1,                           .readdatavalid
		.ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror (),                                                     //  output,    width = 1, ctrl_ecc_readdataerror_0_1.ctrl_ecc_readdataerror
		.ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror (),                                                     //  output,    width = 1, ctrl_ecc_readdataerror_0_0.ctrl_ecc_readdataerror
		.apb_0_ur_paddr                                    (hbm_top_apb_0_ur_paddr),                               //   input,   width = 16,                      apb_0.ur_paddr
		.apb_0_ur_psel                                     (hbm_top_apb_0_ur_psel),                                //   input,    width = 1,                           .ur_psel
		.apb_0_ur_penable                                  (hbm_top_apb_0_ur_penable),                             //   input,    width = 1,                           .ur_penable
		.apb_0_ur_pwrite                                   (hbm_top_apb_0_ur_pwrite),                              //   input,    width = 1,                           .ur_pwrite
		.apb_0_ur_pwdata                                   (hbm_top_apb_0_ur_pwdata),                              //   input,   width = 16,                           .ur_pwdata
		.apb_0_ur_pstrb                                    (hbm_top_apb_0_ur_pstrb),                               //   input,    width = 2,                           .ur_pstrb
		.apb_0_ur_prready                                  (hbm_top_apb_0_ur_prready),                             //  output,    width = 1,                           .ur_prready
		.apb_0_ur_prdata                                   (hbm_top_apb_0_ur_prdata)                               //  output,   width = 16,                           .ur_prdata
	);

	qsys_top_reset reset (
		.in_reset  (reset_reset),           //   input,  width = 1,  in_reset.reset
		.out_reset (reset_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	qsys_top_iopll_0 top_core_clk_iopll (
		.rst      (top_core_clk_iopll_reset_reset),   //   input,  width = 1,   reset.reset
		.refclk   (top_core_clk_iopll_refclk_clk),    //   input,  width = 1,  refclk.clk
		.locked   (top_core_clk_iopll_locked_export), //  output,  width = 1,  locked.export
		.outclk_0 (top_core_clk_iopll_outclk0_clk)    //  output,  width = 1, outclk0.clk
	);

	qsys_top_altera_mm_interconnect_1920_5dafona mm_interconnect_0 (
		.ch_0_0_master_m0_address                                                  (ch_0_0_master_m0_address),                             //   input,   width = 64,                                                    ch_0_0_master_m0.address
		.ch_0_0_master_m0_waitrequest                                              (ch_0_0_master_m0_waitrequest),                         //  output,    width = 1,                                                                    .waitrequest
		.ch_0_0_master_m0_byteenable                                               (ch_0_0_master_m0_byteenable),                          //   input,   width = 32,                                                                    .byteenable
		.ch_0_0_master_m0_read                                                     (ch_0_0_master_m0_read),                                //   input,    width = 1,                                                                    .read
		.ch_0_0_master_m0_readdata                                                 (ch_0_0_master_m0_readdata),                            //  output,  width = 256,                                                                    .readdata
		.ch_0_0_master_m0_readdatavalid                                            (ch_0_0_master_m0_readdatavalid),                       //  output,    width = 1,                                                                    .readdatavalid
		.ch_0_0_master_m0_write                                                    (ch_0_0_master_m0_write),                               //   input,    width = 1,                                                                    .write
		.ch_0_0_master_m0_writedata                                                (ch_0_0_master_m0_writedata),                           //   input,  width = 256,                                                                    .writedata
		.ch_0_1_master_m0_address                                                  (ch_0_1_master_m0_address),                             //   input,   width = 64,                                                    ch_0_1_master_m0.address
		.ch_0_1_master_m0_waitrequest                                              (ch_0_1_master_m0_waitrequest),                         //  output,    width = 1,                                                                    .waitrequest
		.ch_0_1_master_m0_byteenable                                               (ch_0_1_master_m0_byteenable),                          //   input,   width = 32,                                                                    .byteenable
		.ch_0_1_master_m0_read                                                     (ch_0_1_master_m0_read),                                //   input,    width = 1,                                                                    .read
		.ch_0_1_master_m0_readdata                                                 (ch_0_1_master_m0_readdata),                            //  output,  width = 256,                                                                    .readdata
		.ch_0_1_master_m0_readdatavalid                                            (ch_0_1_master_m0_readdatavalid),                       //  output,    width = 1,                                                                    .readdatavalid
		.ch_0_1_master_m0_write                                                    (ch_0_1_master_m0_write),                               //   input,    width = 1,                                                                    .write
		.ch_0_1_master_m0_writedata                                                (ch_0_1_master_m0_writedata),                           //   input,  width = 256,                                                                    .writedata
		.hbm_top_ctrl_amm_0_0_address                                              (mm_interconnect_0_hbm_top_ctrl_amm_0_0_address),       //  output,   width = 29,                                                hbm_top_ctrl_amm_0_0.address
		.hbm_top_ctrl_amm_0_0_write                                                (mm_interconnect_0_hbm_top_ctrl_amm_0_0_write),         //  output,    width = 1,                                                                    .write
		.hbm_top_ctrl_amm_0_0_read                                                 (mm_interconnect_0_hbm_top_ctrl_amm_0_0_read),          //  output,    width = 1,                                                                    .read
		.hbm_top_ctrl_amm_0_0_readdata                                             (mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdata),      //   input,  width = 256,                                                                    .readdata
		.hbm_top_ctrl_amm_0_0_writedata                                            (mm_interconnect_0_hbm_top_ctrl_amm_0_0_writedata),     //  output,  width = 256,                                                                    .writedata
		.hbm_top_ctrl_amm_0_0_burstcount                                           (mm_interconnect_0_hbm_top_ctrl_amm_0_0_burstcount),    //  output,    width = 7,                                                                    .burstcount
		.hbm_top_ctrl_amm_0_0_byteenable                                           (mm_interconnect_0_hbm_top_ctrl_amm_0_0_byteenable),    //  output,   width = 32,                                                                    .byteenable
		.hbm_top_ctrl_amm_0_0_readdatavalid                                        (mm_interconnect_0_hbm_top_ctrl_amm_0_0_readdatavalid), //   input,    width = 1,                                                                    .readdatavalid
		.hbm_top_ctrl_amm_0_0_waitrequest                                          (~mm_interconnect_0_hbm_top_ctrl_amm_0_0_waitrequest),  //   input,    width = 1,                                                                    .waitrequest
		.hbm_top_ctrl_amm_0_1_address                                              (mm_interconnect_0_hbm_top_ctrl_amm_0_1_address),       //  output,   width = 29,                                                hbm_top_ctrl_amm_0_1.address
		.hbm_top_ctrl_amm_0_1_write                                                (mm_interconnect_0_hbm_top_ctrl_amm_0_1_write),         //  output,    width = 1,                                                                    .write
		.hbm_top_ctrl_amm_0_1_read                                                 (mm_interconnect_0_hbm_top_ctrl_amm_0_1_read),          //  output,    width = 1,                                                                    .read
		.hbm_top_ctrl_amm_0_1_readdata                                             (mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdata),      //   input,  width = 256,                                                                    .readdata
		.hbm_top_ctrl_amm_0_1_writedata                                            (mm_interconnect_0_hbm_top_ctrl_amm_0_1_writedata),     //  output,  width = 256,                                                                    .writedata
		.hbm_top_ctrl_amm_0_1_burstcount                                           (mm_interconnect_0_hbm_top_ctrl_amm_0_1_burstcount),    //  output,    width = 7,                                                                    .burstcount
		.hbm_top_ctrl_amm_0_1_byteenable                                           (mm_interconnect_0_hbm_top_ctrl_amm_0_1_byteenable),    //  output,   width = 32,                                                                    .byteenable
		.hbm_top_ctrl_amm_0_1_readdatavalid                                        (mm_interconnect_0_hbm_top_ctrl_amm_0_1_readdatavalid), //   input,    width = 1,                                                                    .readdatavalid
		.hbm_top_ctrl_amm_0_1_waitrequest                                          (~mm_interconnect_0_hbm_top_ctrl_amm_0_1_waitrequest),  //   input,    width = 1,                                                                    .waitrequest
		.ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset             (rst_controller_001_reset_out_reset),                   //   input,    width = 1,             ch_0_0_master_m0_translator_reset_reset_bridge_in_reset.reset
		.hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset         (rst_controller_002_reset_out_reset),                   //   input,    width = 1,         hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset.reset
		.hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                   //   input,    width = 1, hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		.hbm_top_wmc_clk_0_clk                                                     (hbm_top_wmc_clk_0_clk)                                 //   input,    width = 1,                                                   hbm_top_wmc_clk_0.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (reset_out_reset_reset),          //   input,  width = 1, reset_in0.reset
		.clk            (hbm_top_wmc_clk_0_clk),          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (reset_out_reset_reset),              //   input,  width = 1, reset_in0.reset
		.clk            (hbm_top_wmc_clk_0_clk),              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~hbm_top_wmcrst_n_0_reset),          //   input,  width = 1, reset_in0.reset
		.clk            (hbm_top_wmc_clk_0_clk),              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
