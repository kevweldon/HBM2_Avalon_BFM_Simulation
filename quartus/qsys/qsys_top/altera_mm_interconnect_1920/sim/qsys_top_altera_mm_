// qsys_top_altera_mm_interconnect_1920_5dafona.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_5dafona (
		input  wire [63:0]  ch_0_0_master_m0_address,                                                  //                                                    ch_0_0_master_m0.address
		output wire         ch_0_0_master_m0_waitrequest,                                              //                                                                    .waitrequest
		input  wire [31:0]  ch_0_0_master_m0_byteenable,                                               //                                                                    .byteenable
		input  wire         ch_0_0_master_m0_read,                                                     //                                                                    .read
		output wire [255:0] ch_0_0_master_m0_readdata,                                                 //                                                                    .readdata
		output wire         ch_0_0_master_m0_readdatavalid,                                            //                                                                    .readdatavalid
		input  wire         ch_0_0_master_m0_write,                                                    //                                                                    .write
		input  wire [255:0] ch_0_0_master_m0_writedata,                                                //                                                                    .writedata
		input  wire [63:0]  ch_0_1_master_m0_address,                                                  //                                                    ch_0_1_master_m0.address
		output wire         ch_0_1_master_m0_waitrequest,                                              //                                                                    .waitrequest
		input  wire [31:0]  ch_0_1_master_m0_byteenable,                                               //                                                                    .byteenable
		input  wire         ch_0_1_master_m0_read,                                                     //                                                                    .read
		output wire [255:0] ch_0_1_master_m0_readdata,                                                 //                                                                    .readdata
		output wire         ch_0_1_master_m0_readdatavalid,                                            //                                                                    .readdatavalid
		input  wire         ch_0_1_master_m0_write,                                                    //                                                                    .write
		input  wire [255:0] ch_0_1_master_m0_writedata,                                                //                                                                    .writedata
		output wire [28:0]  hbm_top_ctrl_amm_0_0_address,                                              //                                                hbm_top_ctrl_amm_0_0.address
		output wire         hbm_top_ctrl_amm_0_0_write,                                                //                                                                    .write
		output wire         hbm_top_ctrl_amm_0_0_read,                                                 //                                                                    .read
		input  wire [255:0] hbm_top_ctrl_amm_0_0_readdata,                                             //                                                                    .readdata
		output wire [255:0] hbm_top_ctrl_amm_0_0_writedata,                                            //                                                                    .writedata
		output wire [6:0]   hbm_top_ctrl_amm_0_0_burstcount,                                           //                                                                    .burstcount
		output wire [31:0]  hbm_top_ctrl_amm_0_0_byteenable,                                           //                                                                    .byteenable
		input  wire         hbm_top_ctrl_amm_0_0_readdatavalid,                                        //                                                                    .readdatavalid
		input  wire         hbm_top_ctrl_amm_0_0_waitrequest,                                          //                                                                    .waitrequest
		output wire [28:0]  hbm_top_ctrl_amm_0_1_address,                                              //                                                hbm_top_ctrl_amm_0_1.address
		output wire         hbm_top_ctrl_amm_0_1_write,                                                //                                                                    .write
		output wire         hbm_top_ctrl_amm_0_1_read,                                                 //                                                                    .read
		input  wire [255:0] hbm_top_ctrl_amm_0_1_readdata,                                             //                                                                    .readdata
		output wire [255:0] hbm_top_ctrl_amm_0_1_writedata,                                            //                                                                    .writedata
		output wire [6:0]   hbm_top_ctrl_amm_0_1_burstcount,                                           //                                                                    .burstcount
		output wire [31:0]  hbm_top_ctrl_amm_0_1_byteenable,                                           //                                                                    .byteenable
		input  wire         hbm_top_ctrl_amm_0_1_readdatavalid,                                        //                                                                    .readdatavalid
		input  wire         hbm_top_ctrl_amm_0_1_waitrequest,                                          //                                                                    .waitrequest
		input  wire         ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset,             //             ch_0_0_master_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire         hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset,         //         hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, // hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire         hbm_top_wmc_clk_0_clk                                                      //                                                   hbm_top_wmc_clk_0.clk
	);

	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_waitrequest;   // ch_0_0_master_m0_agent:av_waitrequest -> ch_0_0_master_m0_translator:uav_waitrequest
	wire  [255:0] ch_0_0_master_m0_translator_avalon_universal_master_0_readdata;      // ch_0_0_master_m0_agent:av_readdata -> ch_0_0_master_m0_translator:uav_readdata
	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_debugaccess;   // ch_0_0_master_m0_translator:uav_debugaccess -> ch_0_0_master_m0_agent:av_debugaccess
	wire   [63:0] ch_0_0_master_m0_translator_avalon_universal_master_0_address;       // ch_0_0_master_m0_translator:uav_address -> ch_0_0_master_m0_agent:av_address
	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_read;          // ch_0_0_master_m0_translator:uav_read -> ch_0_0_master_m0_agent:av_read
	wire   [31:0] ch_0_0_master_m0_translator_avalon_universal_master_0_byteenable;    // ch_0_0_master_m0_translator:uav_byteenable -> ch_0_0_master_m0_agent:av_byteenable
	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_readdatavalid; // ch_0_0_master_m0_agent:av_readdatavalid -> ch_0_0_master_m0_translator:uav_readdatavalid
	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_lock;          // ch_0_0_master_m0_translator:uav_lock -> ch_0_0_master_m0_agent:av_lock
	wire          ch_0_0_master_m0_translator_avalon_universal_master_0_write;         // ch_0_0_master_m0_translator:uav_write -> ch_0_0_master_m0_agent:av_write
	wire  [255:0] ch_0_0_master_m0_translator_avalon_universal_master_0_writedata;     // ch_0_0_master_m0_translator:uav_writedata -> ch_0_0_master_m0_agent:av_writedata
	wire    [5:0] ch_0_0_master_m0_translator_avalon_universal_master_0_burstcount;    // ch_0_0_master_m0_translator:uav_burstcount -> ch_0_0_master_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> ch_0_0_master_m0_agent:rp_valid
	wire  [403:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> ch_0_0_master_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                                   // ch_0_0_master_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> ch_0_0_master_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> ch_0_0_master_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> ch_0_0_master_m0_agent:rp_endofpacket
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_waitrequest;   // ch_0_1_master_m0_agent:av_waitrequest -> ch_0_1_master_m0_translator:uav_waitrequest
	wire  [255:0] ch_0_1_master_m0_translator_avalon_universal_master_0_readdata;      // ch_0_1_master_m0_agent:av_readdata -> ch_0_1_master_m0_translator:uav_readdata
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_debugaccess;   // ch_0_1_master_m0_translator:uav_debugaccess -> ch_0_1_master_m0_agent:av_debugaccess
	wire   [63:0] ch_0_1_master_m0_translator_avalon_universal_master_0_address;       // ch_0_1_master_m0_translator:uav_address -> ch_0_1_master_m0_agent:av_address
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_read;          // ch_0_1_master_m0_translator:uav_read -> ch_0_1_master_m0_agent:av_read
	wire   [31:0] ch_0_1_master_m0_translator_avalon_universal_master_0_byteenable;    // ch_0_1_master_m0_translator:uav_byteenable -> ch_0_1_master_m0_agent:av_byteenable
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_readdatavalid; // ch_0_1_master_m0_agent:av_readdatavalid -> ch_0_1_master_m0_translator:uav_readdatavalid
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_lock;          // ch_0_1_master_m0_translator:uav_lock -> ch_0_1_master_m0_agent:av_lock
	wire          ch_0_1_master_m0_translator_avalon_universal_master_0_write;         // ch_0_1_master_m0_translator:uav_write -> ch_0_1_master_m0_agent:av_write
	wire  [255:0] ch_0_1_master_m0_translator_avalon_universal_master_0_writedata;     // ch_0_1_master_m0_translator:uav_writedata -> ch_0_1_master_m0_agent:av_writedata
	wire    [5:0] ch_0_1_master_m0_translator_avalon_universal_master_0_burstcount;    // ch_0_1_master_m0_translator:uav_burstcount -> ch_0_1_master_m0_agent:av_burstcount
	wire  [255:0] hbm_top_ctrl_amm_0_0_agent_m0_readdata;                              // hbm_top_ctrl_amm_0_0_translator:uav_readdata -> hbm_top_ctrl_amm_0_0_agent:m0_readdata
	wire          hbm_top_ctrl_amm_0_0_agent_m0_waitrequest;                           // hbm_top_ctrl_amm_0_0_translator:uav_waitrequest -> hbm_top_ctrl_amm_0_0_agent:m0_waitrequest
	wire          hbm_top_ctrl_amm_0_0_agent_m0_debugaccess;                           // hbm_top_ctrl_amm_0_0_agent:m0_debugaccess -> hbm_top_ctrl_amm_0_0_translator:uav_debugaccess
	wire   [63:0] hbm_top_ctrl_amm_0_0_agent_m0_address;                               // hbm_top_ctrl_amm_0_0_agent:m0_address -> hbm_top_ctrl_amm_0_0_translator:uav_address
	wire   [31:0] hbm_top_ctrl_amm_0_0_agent_m0_byteenable;                            // hbm_top_ctrl_amm_0_0_agent:m0_byteenable -> hbm_top_ctrl_amm_0_0_translator:uav_byteenable
	wire          hbm_top_ctrl_amm_0_0_agent_m0_read;                                  // hbm_top_ctrl_amm_0_0_agent:m0_read -> hbm_top_ctrl_amm_0_0_translator:uav_read
	wire          hbm_top_ctrl_amm_0_0_agent_m0_readdatavalid;                         // hbm_top_ctrl_amm_0_0_translator:uav_readdatavalid -> hbm_top_ctrl_amm_0_0_agent:m0_readdatavalid
	wire          hbm_top_ctrl_amm_0_0_agent_m0_lock;                                  // hbm_top_ctrl_amm_0_0_agent:m0_lock -> hbm_top_ctrl_amm_0_0_translator:uav_lock
	wire  [255:0] hbm_top_ctrl_amm_0_0_agent_m0_writedata;                             // hbm_top_ctrl_amm_0_0_agent:m0_writedata -> hbm_top_ctrl_amm_0_0_translator:uav_writedata
	wire          hbm_top_ctrl_amm_0_0_agent_m0_write;                                 // hbm_top_ctrl_amm_0_0_agent:m0_write -> hbm_top_ctrl_amm_0_0_translator:uav_write
	wire   [11:0] hbm_top_ctrl_amm_0_0_agent_m0_burstcount;                            // hbm_top_ctrl_amm_0_0_agent:m0_burstcount -> hbm_top_ctrl_amm_0_0_translator:uav_burstcount
	wire          hbm_top_ctrl_amm_0_0_agent_rf_source_valid;                          // hbm_top_ctrl_amm_0_0_agent:rf_source_valid -> hbm_top_ctrl_amm_0_0_agent_rsp_fifo:in_valid
	wire  [404:0] hbm_top_ctrl_amm_0_0_agent_rf_source_data;                           // hbm_top_ctrl_amm_0_0_agent:rf_source_data -> hbm_top_ctrl_amm_0_0_agent_rsp_fifo:in_data
	wire          hbm_top_ctrl_amm_0_0_agent_rf_source_ready;                          // hbm_top_ctrl_amm_0_0_agent_rsp_fifo:in_ready -> hbm_top_ctrl_amm_0_0_agent:rf_source_ready
	wire          hbm_top_ctrl_amm_0_0_agent_rf_source_startofpacket;                  // hbm_top_ctrl_amm_0_0_agent:rf_source_startofpacket -> hbm_top_ctrl_amm_0_0_agent_rsp_fifo:in_startofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rf_source_endofpacket;                    // hbm_top_ctrl_amm_0_0_agent:rf_source_endofpacket -> hbm_top_ctrl_amm_0_0_agent_rsp_fifo:in_endofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_valid;                       // hbm_top_ctrl_amm_0_0_agent_rsp_fifo:out_valid -> hbm_top_ctrl_amm_0_0_agent:rf_sink_valid
	wire  [404:0] hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_data;                        // hbm_top_ctrl_amm_0_0_agent_rsp_fifo:out_data -> hbm_top_ctrl_amm_0_0_agent:rf_sink_data
	wire          hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_ready;                       // hbm_top_ctrl_amm_0_0_agent:rf_sink_ready -> hbm_top_ctrl_amm_0_0_agent_rsp_fifo:out_ready
	wire          hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_startofpacket;               // hbm_top_ctrl_amm_0_0_agent_rsp_fifo:out_startofpacket -> hbm_top_ctrl_amm_0_0_agent:rf_sink_startofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_endofpacket;                 // hbm_top_ctrl_amm_0_0_agent_rsp_fifo:out_endofpacket -> hbm_top_ctrl_amm_0_0_agent:rf_sink_endofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_valid;                     // hbm_top_ctrl_amm_0_0_agent:rdata_fifo_src_valid -> hbm_top_ctrl_amm_0_0_agent:rdata_fifo_sink_valid
	wire  [257:0] hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_data;                      // hbm_top_ctrl_amm_0_0_agent:rdata_fifo_src_data -> hbm_top_ctrl_amm_0_0_agent:rdata_fifo_sink_data
	wire          hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_ready;                     // hbm_top_ctrl_amm_0_0_agent:rdata_fifo_sink_ready -> hbm_top_ctrl_amm_0_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> hbm_top_ctrl_amm_0_0_agent:cp_valid
	wire  [403:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> hbm_top_ctrl_amm_0_0_agent:cp_data
	wire          cmd_mux_src_ready;                                                   // hbm_top_ctrl_amm_0_0_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> hbm_top_ctrl_amm_0_0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> hbm_top_ctrl_amm_0_0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> hbm_top_ctrl_amm_0_0_agent:cp_endofpacket
	wire  [255:0] hbm_top_ctrl_amm_0_1_agent_m0_readdata;                              // hbm_top_ctrl_amm_0_1_translator:uav_readdata -> hbm_top_ctrl_amm_0_1_agent:m0_readdata
	wire          hbm_top_ctrl_amm_0_1_agent_m0_waitrequest;                           // hbm_top_ctrl_amm_0_1_translator:uav_waitrequest -> hbm_top_ctrl_amm_0_1_agent:m0_waitrequest
	wire          hbm_top_ctrl_amm_0_1_agent_m0_debugaccess;                           // hbm_top_ctrl_amm_0_1_agent:m0_debugaccess -> hbm_top_ctrl_amm_0_1_translator:uav_debugaccess
	wire   [63:0] hbm_top_ctrl_amm_0_1_agent_m0_address;                               // hbm_top_ctrl_amm_0_1_agent:m0_address -> hbm_top_ctrl_amm_0_1_translator:uav_address
	wire   [31:0] hbm_top_ctrl_amm_0_1_agent_m0_byteenable;                            // hbm_top_ctrl_amm_0_1_agent:m0_byteenable -> hbm_top_ctrl_amm_0_1_translator:uav_byteenable
	wire          hbm_top_ctrl_amm_0_1_agent_m0_read;                                  // hbm_top_ctrl_amm_0_1_agent:m0_read -> hbm_top_ctrl_amm_0_1_translator:uav_read
	wire          hbm_top_ctrl_amm_0_1_agent_m0_readdatavalid;                         // hbm_top_ctrl_amm_0_1_translator:uav_readdatavalid -> hbm_top_ctrl_amm_0_1_agent:m0_readdatavalid
	wire          hbm_top_ctrl_amm_0_1_agent_m0_lock;                                  // hbm_top_ctrl_amm_0_1_agent:m0_lock -> hbm_top_ctrl_amm_0_1_translator:uav_lock
	wire  [255:0] hbm_top_ctrl_amm_0_1_agent_m0_writedata;                             // hbm_top_ctrl_amm_0_1_agent:m0_writedata -> hbm_top_ctrl_amm_0_1_translator:uav_writedata
	wire          hbm_top_ctrl_amm_0_1_agent_m0_write;                                 // hbm_top_ctrl_amm_0_1_agent:m0_write -> hbm_top_ctrl_amm_0_1_translator:uav_write
	wire   [11:0] hbm_top_ctrl_amm_0_1_agent_m0_burstcount;                            // hbm_top_ctrl_amm_0_1_agent:m0_burstcount -> hbm_top_ctrl_amm_0_1_translator:uav_burstcount
	wire          hbm_top_ctrl_amm_0_1_agent_rf_source_valid;                          // hbm_top_ctrl_amm_0_1_agent:rf_source_valid -> hbm_top_ctrl_amm_0_1_agent_rsp_fifo:in_valid
	wire  [404:0] hbm_top_ctrl_amm_0_1_agent_rf_source_data;                           // hbm_top_ctrl_amm_0_1_agent:rf_source_data -> hbm_top_ctrl_amm_0_1_agent_rsp_fifo:in_data
	wire          hbm_top_ctrl_amm_0_1_agent_rf_source_ready;                          // hbm_top_ctrl_amm_0_1_agent_rsp_fifo:in_ready -> hbm_top_ctrl_amm_0_1_agent:rf_source_ready
	wire          hbm_top_ctrl_amm_0_1_agent_rf_source_startofpacket;                  // hbm_top_ctrl_amm_0_1_agent:rf_source_startofpacket -> hbm_top_ctrl_amm_0_1_agent_rsp_fifo:in_startofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rf_source_endofpacket;                    // hbm_top_ctrl_amm_0_1_agent:rf_source_endofpacket -> hbm_top_ctrl_amm_0_1_agent_rsp_fifo:in_endofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_valid;                       // hbm_top_ctrl_amm_0_1_agent_rsp_fifo:out_valid -> hbm_top_ctrl_amm_0_1_agent:rf_sink_valid
	wire  [404:0] hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_data;                        // hbm_top_ctrl_amm_0_1_agent_rsp_fifo:out_data -> hbm_top_ctrl_amm_0_1_agent:rf_sink_data
	wire          hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_ready;                       // hbm_top_ctrl_amm_0_1_agent:rf_sink_ready -> hbm_top_ctrl_amm_0_1_agent_rsp_fifo:out_ready
	wire          hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_startofpacket;               // hbm_top_ctrl_amm_0_1_agent_rsp_fifo:out_startofpacket -> hbm_top_ctrl_amm_0_1_agent:rf_sink_startofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_endofpacket;                 // hbm_top_ctrl_amm_0_1_agent_rsp_fifo:out_endofpacket -> hbm_top_ctrl_amm_0_1_agent:rf_sink_endofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_valid;                     // hbm_top_ctrl_amm_0_1_agent:rdata_fifo_src_valid -> hbm_top_ctrl_amm_0_1_agent:rdata_fifo_sink_valid
	wire  [257:0] hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_data;                      // hbm_top_ctrl_amm_0_1_agent:rdata_fifo_src_data -> hbm_top_ctrl_amm_0_1_agent:rdata_fifo_sink_data
	wire          hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_ready;                     // hbm_top_ctrl_amm_0_1_agent:rdata_fifo_sink_ready -> hbm_top_ctrl_amm_0_1_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                               // cmd_mux_001:src_valid -> hbm_top_ctrl_amm_0_1_agent:cp_valid
	wire  [403:0] cmd_mux_001_src_data;                                                // cmd_mux_001:src_data -> hbm_top_ctrl_amm_0_1_agent:cp_data
	wire          cmd_mux_001_src_ready;                                               // hbm_top_ctrl_amm_0_1_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                             // cmd_mux_001:src_channel -> hbm_top_ctrl_amm_0_1_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                       // cmd_mux_001:src_startofpacket -> hbm_top_ctrl_amm_0_1_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                         // cmd_mux_001:src_endofpacket -> hbm_top_ctrl_amm_0_1_agent:cp_endofpacket
	wire          ch_0_0_master_m0_agent_cp_valid;                                     // ch_0_0_master_m0_agent:cp_valid -> router:sink_valid
	wire  [403:0] ch_0_0_master_m0_agent_cp_data;                                      // ch_0_0_master_m0_agent:cp_data -> router:sink_data
	wire          ch_0_0_master_m0_agent_cp_ready;                                     // router:sink_ready -> ch_0_0_master_m0_agent:cp_ready
	wire          ch_0_0_master_m0_agent_cp_startofpacket;                             // ch_0_0_master_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ch_0_0_master_m0_agent_cp_endofpacket;                               // ch_0_0_master_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [403:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ch_0_1_master_m0_agent_cp_valid;                                     // ch_0_1_master_m0_agent:cp_valid -> router_001:sink_valid
	wire  [403:0] ch_0_1_master_m0_agent_cp_data;                                      // ch_0_1_master_m0_agent:cp_data -> router_001:sink_data
	wire          ch_0_1_master_m0_agent_cp_ready;                                     // router_001:sink_ready -> ch_0_1_master_m0_agent:cp_ready
	wire          ch_0_1_master_m0_agent_cp_startofpacket;                             // ch_0_1_master_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          ch_0_1_master_m0_agent_cp_endofpacket;                               // ch_0_1_master_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rp_valid;                                 // hbm_top_ctrl_amm_0_0_agent:rp_valid -> router_002:sink_valid
	wire  [403:0] hbm_top_ctrl_amm_0_0_agent_rp_data;                                  // hbm_top_ctrl_amm_0_0_agent:rp_data -> router_002:sink_data
	wire          hbm_top_ctrl_amm_0_0_agent_rp_ready;                                 // router_002:sink_ready -> hbm_top_ctrl_amm_0_0_agent:rp_ready
	wire          hbm_top_ctrl_amm_0_0_agent_rp_startofpacket;                         // hbm_top_ctrl_amm_0_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          hbm_top_ctrl_amm_0_0_agent_rp_endofpacket;                           // hbm_top_ctrl_amm_0_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> rsp_demux:sink_valid
	wire  [403:0] router_002_src_data;                                                 // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                              // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rp_valid;                                 // hbm_top_ctrl_amm_0_1_agent:rp_valid -> router_003:sink_valid
	wire  [403:0] hbm_top_ctrl_amm_0_1_agent_rp_data;                                  // hbm_top_ctrl_amm_0_1_agent:rp_data -> router_003:sink_data
	wire          hbm_top_ctrl_amm_0_1_agent_rp_ready;                                 // router_003:sink_ready -> hbm_top_ctrl_amm_0_1_agent:rp_ready
	wire          hbm_top_ctrl_amm_0_1_agent_rp_startofpacket;                         // hbm_top_ctrl_amm_0_1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          hbm_top_ctrl_amm_0_1_agent_rp_endofpacket;                           // hbm_top_ctrl_amm_0_1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [403:0] router_003_src_data;                                                 // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                              // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                        // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                          // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> ch_0_1_master_m0_limiter:cmd_sink_valid
	wire  [403:0] router_001_src_data;                                                 // router_001:src_data -> ch_0_1_master_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                // ch_0_1_master_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                              // router_001:src_channel -> ch_0_1_master_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> ch_0_1_master_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> ch_0_1_master_m0_limiter:cmd_sink_endofpacket
	wire  [403:0] ch_0_1_master_m0_limiter_cmd_src_data;                               // ch_0_1_master_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          ch_0_1_master_m0_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> ch_0_1_master_m0_limiter:cmd_src_ready
	wire    [1:0] ch_0_1_master_m0_limiter_cmd_src_channel;                            // ch_0_1_master_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          ch_0_1_master_m0_limiter_cmd_src_startofpacket;                      // ch_0_1_master_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          ch_0_1_master_m0_limiter_cmd_src_endofpacket;                        // ch_0_1_master_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                               // rsp_mux_001:src_valid -> ch_0_1_master_m0_limiter:rsp_sink_valid
	wire  [403:0] rsp_mux_001_src_data;                                                // rsp_mux_001:src_data -> ch_0_1_master_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                               // ch_0_1_master_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                             // rsp_mux_001:src_channel -> ch_0_1_master_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                       // rsp_mux_001:src_startofpacket -> ch_0_1_master_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                         // rsp_mux_001:src_endofpacket -> ch_0_1_master_m0_limiter:rsp_sink_endofpacket
	wire          ch_0_1_master_m0_limiter_rsp_src_valid;                              // ch_0_1_master_m0_limiter:rsp_src_valid -> ch_0_1_master_m0_agent:rp_valid
	wire  [403:0] ch_0_1_master_m0_limiter_rsp_src_data;                               // ch_0_1_master_m0_limiter:rsp_src_data -> ch_0_1_master_m0_agent:rp_data
	wire          ch_0_1_master_m0_limiter_rsp_src_ready;                              // ch_0_1_master_m0_agent:rp_ready -> ch_0_1_master_m0_limiter:rsp_src_ready
	wire    [1:0] ch_0_1_master_m0_limiter_rsp_src_channel;                            // ch_0_1_master_m0_limiter:rsp_src_channel -> ch_0_1_master_m0_agent:rp_channel
	wire          ch_0_1_master_m0_limiter_rsp_src_startofpacket;                      // ch_0_1_master_m0_limiter:rsp_src_startofpacket -> ch_0_1_master_m0_agent:rp_startofpacket
	wire          ch_0_1_master_m0_limiter_rsp_src_endofpacket;                        // ch_0_1_master_m0_limiter:rsp_src_endofpacket -> ch_0_1_master_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [403:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [403:0] cmd_demux_001_src0_data;                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                            // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [403:0] cmd_demux_001_src1_data;                                             // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                            // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire    [1:0] cmd_demux_001_src1_channel;                                          // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                    // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                      // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [403:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [403:0] rsp_demux_src1_data;                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                            // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [403:0] rsp_demux_001_src0_data;                                             // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                            // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                          // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                    // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                      // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [1:0] ch_0_1_master_m0_limiter_cmd_valid_data;                             // ch_0_1_master_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) ch_0_0_master_m0_translator (
		.clk                    (hbm_top_wmc_clk_0_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (ch_0_0_master_m0_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (ch_0_0_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,    width = 6,                          .burstcount
		.uav_read               (ch_0_0_master_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (ch_0_0_master_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (ch_0_0_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (ch_0_0_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (ch_0_0_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (ch_0_0_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (ch_0_0_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (ch_0_0_master_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (ch_0_0_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (ch_0_0_master_m0_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (ch_0_0_master_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_byteenable          (ch_0_0_master_m0_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_read                (ch_0_0_master_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (ch_0_0_master_m0_readdata),                                           //  output,  width = 256,                          .readdata
		.av_readdatavalid       (ch_0_0_master_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (ch_0_0_master_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (ch_0_0_master_m0_writedata),                                          //   input,  width = 256,                          .writedata
		.av_burstcount          (1'b1),                                                                // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                // (terminated),                                         
		.av_chipselect          (1'b0),                                                                // (terminated),                                         
		.av_lock                (1'b0),                                                                // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                // (terminated),                                         
		.uav_clken              (),                                                                    // (terminated),                                         
		.av_clken               (1'b1),                                                                // (terminated),                                         
		.uav_response           (2'b00),                                                               // (terminated),                                         
		.av_response            (),                                                                    // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                // (terminated),                                         
		.av_writeresponsevalid  ()                                                                     // (terminated),                                         
	);

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) ch_0_1_master_m0_translator (
		.clk                    (hbm_top_wmc_clk_0_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (ch_0_1_master_m0_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (ch_0_1_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,    width = 6,                          .burstcount
		.uav_read               (ch_0_1_master_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (ch_0_1_master_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (ch_0_1_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (ch_0_1_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (ch_0_1_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (ch_0_1_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (ch_0_1_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (ch_0_1_master_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (ch_0_1_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (ch_0_1_master_m0_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (ch_0_1_master_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_byteenable          (ch_0_1_master_m0_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_read                (ch_0_1_master_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (ch_0_1_master_m0_readdata),                                           //  output,  width = 256,                          .readdata
		.av_readdatavalid       (ch_0_1_master_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (ch_0_1_master_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (ch_0_1_master_m0_writedata),                                          //   input,  width = 256,                          .writedata
		.av_burstcount          (1'b1),                                                                // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                // (terminated),                                         
		.av_chipselect          (1'b0),                                                                // (terminated),                                         
		.av_lock                (1'b0),                                                                // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                // (terminated),                                         
		.uav_clken              (),                                                                    // (terminated),                                         
		.av_clken               (1'b1),                                                                // (terminated),                                         
		.uav_response           (2'b00),                                                               // (terminated),                                         
		.av_response            (),                                                                    // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                // (terminated),                                         
		.av_writeresponsevalid  ()                                                                     // (terminated),                                         
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (12),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) hbm_top_ctrl_amm_0_0_translator (
		.clk                    (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,                      clk.clk
		.reset                  (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (hbm_top_ctrl_amm_0_0_agent_m0_address),                             //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (hbm_top_ctrl_amm_0_0_agent_m0_burstcount),                          //   input,   width = 12,                         .burstcount
		.uav_read               (hbm_top_ctrl_amm_0_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (hbm_top_ctrl_amm_0_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (hbm_top_ctrl_amm_0_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (hbm_top_ctrl_amm_0_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (hbm_top_ctrl_amm_0_0_agent_m0_byteenable),                          //   input,   width = 32,                         .byteenable
		.uav_readdata           (hbm_top_ctrl_amm_0_0_agent_m0_readdata),                            //  output,  width = 256,                         .readdata
		.uav_writedata          (hbm_top_ctrl_amm_0_0_agent_m0_writedata),                           //   input,  width = 256,                         .writedata
		.uav_lock               (hbm_top_ctrl_amm_0_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (hbm_top_ctrl_amm_0_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (hbm_top_ctrl_amm_0_0_address),                                      //  output,   width = 29,      avalon_anti_slave_0.address
		.av_write               (hbm_top_ctrl_amm_0_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (hbm_top_ctrl_amm_0_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (hbm_top_ctrl_amm_0_0_readdata),                                     //   input,  width = 256,                         .readdata
		.av_writedata           (hbm_top_ctrl_amm_0_0_writedata),                                    //  output,  width = 256,                         .writedata
		.av_burstcount          (hbm_top_ctrl_amm_0_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (hbm_top_ctrl_amm_0_0_byteenable),                                   //  output,   width = 32,                         .byteenable
		.av_readdatavalid       (hbm_top_ctrl_amm_0_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (hbm_top_ctrl_amm_0_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (),                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                  // (terminated),                                        
		.av_lock                (),                                                                  // (terminated),                                        
		.av_chipselect          (),                                                                  // (terminated),                                        
		.av_clken               (),                                                                  // (terminated),                                        
		.uav_clken              (1'b0),                                                              // (terminated),                                        
		.av_debugaccess         (),                                                                  // (terminated),                                        
		.av_outputenable        (),                                                                  // (terminated),                                        
		.uav_response           (),                                                                  // (terminated),                                        
		.av_response            (2'b00),                                                             // (terminated),                                        
		.uav_writeresponsevalid (),                                                                  // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                        
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (12),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) hbm_top_ctrl_amm_0_1_translator (
		.clk                    (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,                      clk.clk
		.reset                  (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (hbm_top_ctrl_amm_0_1_agent_m0_address),                             //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (hbm_top_ctrl_amm_0_1_agent_m0_burstcount),                          //   input,   width = 12,                         .burstcount
		.uav_read               (hbm_top_ctrl_amm_0_1_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (hbm_top_ctrl_amm_0_1_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (hbm_top_ctrl_amm_0_1_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (hbm_top_ctrl_amm_0_1_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (hbm_top_ctrl_amm_0_1_agent_m0_byteenable),                          //   input,   width = 32,                         .byteenable
		.uav_readdata           (hbm_top_ctrl_amm_0_1_agent_m0_readdata),                            //  output,  width = 256,                         .readdata
		.uav_writedata          (hbm_top_ctrl_amm_0_1_agent_m0_writedata),                           //   input,  width = 256,                         .writedata
		.uav_lock               (hbm_top_ctrl_amm_0_1_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (hbm_top_ctrl_amm_0_1_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (hbm_top_ctrl_amm_0_1_address),                                      //  output,   width = 29,      avalon_anti_slave_0.address
		.av_write               (hbm_top_ctrl_amm_0_1_write),                                        //  output,    width = 1,                         .write
		.av_read                (hbm_top_ctrl_amm_0_1_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (hbm_top_ctrl_amm_0_1_readdata),                                     //   input,  width = 256,                         .readdata
		.av_writedata           (hbm_top_ctrl_amm_0_1_writedata),                                    //  output,  width = 256,                         .writedata
		.av_burstcount          (hbm_top_ctrl_amm_0_1_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (hbm_top_ctrl_amm_0_1_byteenable),                                   //  output,   width = 32,                         .byteenable
		.av_readdatavalid       (hbm_top_ctrl_amm_0_1_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (hbm_top_ctrl_amm_0_1_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (),                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                  // (terminated),                                        
		.av_lock                (),                                                                  // (terminated),                                        
		.av_chipselect          (),                                                                  // (terminated),                                        
		.av_clken               (),                                                                  // (terminated),                                        
		.uav_clken              (1'b0),                                                              // (terminated),                                        
		.av_debugaccess         (),                                                                  // (terminated),                                        
		.av_outputenable        (),                                                                  // (terminated),                                        
		.uav_response           (),                                                                  // (terminated),                                        
		.av_response            (2'b00),                                                             // (terminated),                                        
		.uav_writeresponsevalid (),                                                                  // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                        
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (403),
		.PKT_DOMAIN_H              (402),
		.PKT_DOMAIN_L              (401),
		.PKT_SNOOP_H               (400),
		.PKT_SNOOP_L               (397),
		.PKT_BARRIER_H             (396),
		.PKT_BARRIER_L             (395),
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_QOS_H                 (379),
		.PKT_QOS_L                 (379),
		.PKT_DATA_SIDEBAND_H       (377),
		.PKT_DATA_SIDEBAND_L       (377),
		.PKT_ADDR_SIDEBAND_H       (376),
		.PKT_ADDR_SIDEBAND_L       (376),
		.PKT_BURST_TYPE_H          (375),
		.PKT_BURST_TYPE_L          (374),
		.PKT_CACHE_H               (389),
		.PKT_CACHE_L               (386),
		.PKT_THREAD_ID_H           (382),
		.PKT_THREAD_ID_L           (382),
		.PKT_BURST_SIZE_H          (373),
		.PKT_BURST_SIZE_L          (371),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (378),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (370),
		.PKT_BURSTWRAP_L           (370),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.ST_DATA_W                 (404),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) ch_0_0_master_m0_agent (
		.clk                   (hbm_top_wmc_clk_0_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (ch_0_0_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (ch_0_0_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ch_0_0_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ch_0_0_master_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (ch_0_0_master_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (ch_0_0_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ch_0_0_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ch_0_0_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (ch_0_0_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 6,          .burstcount
		.av_debugaccess        (ch_0_0_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ch_0_0_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ch_0_0_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ch_0_0_master_m0_agent_cp_data),                                      //  output,  width = 404,          .data
		.cp_startofpacket      (ch_0_0_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ch_0_0_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ch_0_0_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                   //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                    //   input,  width = 404,          .data
		.rp_channel            (rsp_mux_src_channel),                                                 //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                   //  output,    width = 1,          .ready
		.av_response           (),                                                                    // (terminated),                         
		.av_writeresponsevalid ()                                                                     // (terminated),                         
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (403),
		.PKT_DOMAIN_H              (402),
		.PKT_DOMAIN_L              (401),
		.PKT_SNOOP_H               (400),
		.PKT_SNOOP_L               (397),
		.PKT_BARRIER_H             (396),
		.PKT_BARRIER_L             (395),
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_QOS_H                 (379),
		.PKT_QOS_L                 (379),
		.PKT_DATA_SIDEBAND_H       (377),
		.PKT_DATA_SIDEBAND_L       (377),
		.PKT_ADDR_SIDEBAND_H       (376),
		.PKT_ADDR_SIDEBAND_L       (376),
		.PKT_BURST_TYPE_H          (375),
		.PKT_BURST_TYPE_L          (374),
		.PKT_CACHE_H               (389),
		.PKT_CACHE_L               (386),
		.PKT_THREAD_ID_H           (382),
		.PKT_THREAD_ID_L           (382),
		.PKT_BURST_SIZE_H          (373),
		.PKT_BURST_SIZE_L          (371),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (378),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (370),
		.PKT_BURSTWRAP_L           (370),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.ST_DATA_W                 (404),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) ch_0_1_master_m0_agent (
		.clk                   (hbm_top_wmc_clk_0_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (ch_0_1_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (ch_0_1_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ch_0_1_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ch_0_1_master_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (ch_0_1_master_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (ch_0_1_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ch_0_1_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ch_0_1_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (ch_0_1_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 6,          .burstcount
		.av_debugaccess        (ch_0_1_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ch_0_1_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ch_0_1_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ch_0_1_master_m0_agent_cp_data),                                      //  output,  width = 404,          .data
		.cp_startofpacket      (ch_0_1_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ch_0_1_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ch_0_1_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (ch_0_1_master_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (ch_0_1_master_m0_limiter_rsp_src_data),                               //   input,  width = 404,          .data
		.rp_channel            (ch_0_1_master_m0_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (ch_0_1_master_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (ch_0_1_master_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (ch_0_1_master_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                    // (terminated),                         
		.av_writeresponsevalid ()                                                                     // (terminated),                         
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (373),
		.PKT_BURST_SIZE_L          (371),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (378),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (370),
		.PKT_BURSTWRAP_L           (370),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (404),
		.AVS_BURSTCOUNT_W          (12),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) hbm_top_ctrl_amm_0_0_agent (
		.clk                     (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,             clk.clk
		.reset                   (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (hbm_top_ctrl_amm_0_0_agent_m0_address),                             //  output,   width = 64,              m0.address
		.m0_burstcount           (hbm_top_ctrl_amm_0_0_agent_m0_burstcount),                          //  output,   width = 12,                .burstcount
		.m0_byteenable           (hbm_top_ctrl_amm_0_0_agent_m0_byteenable),                          //  output,   width = 32,                .byteenable
		.m0_debugaccess          (hbm_top_ctrl_amm_0_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (hbm_top_ctrl_amm_0_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (hbm_top_ctrl_amm_0_0_agent_m0_readdata),                            //   input,  width = 256,                .readdata
		.m0_readdatavalid        (hbm_top_ctrl_amm_0_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (hbm_top_ctrl_amm_0_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (hbm_top_ctrl_amm_0_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (hbm_top_ctrl_amm_0_0_agent_m0_writedata),                           //  output,  width = 256,                .writedata
		.m0_write                (hbm_top_ctrl_amm_0_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (hbm_top_ctrl_amm_0_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (hbm_top_ctrl_amm_0_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (hbm_top_ctrl_amm_0_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (hbm_top_ctrl_amm_0_0_agent_rp_data),                                //  output,  width = 404,                .data
		.rp_startofpacket        (hbm_top_ctrl_amm_0_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //   input,  width = 404,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //   input,    width = 2,                .channel
		.rf_sink_ready           (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_data),                      //   input,  width = 405,                .data
		.rf_source_ready         (hbm_top_ctrl_amm_0_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (hbm_top_ctrl_amm_0_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (hbm_top_ctrl_amm_0_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (hbm_top_ctrl_amm_0_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (hbm_top_ctrl_amm_0_0_agent_rf_source_data),                         //  output,  width = 405,                .data
		.rdata_fifo_sink_ready   (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_data),                    //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (hbm_top_ctrl_amm_0_0_agent_rdata_fifo_src_data),                    //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (405),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) hbm_top_ctrl_amm_0_0_agent_rsp_fifo (
		.clk               (hbm_top_wmc_clk_0_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (hbm_top_ctrl_amm_0_0_agent_rf_source_data),                                 //   input,  width = 405,        in.data
		.in_valid          (hbm_top_ctrl_amm_0_0_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (hbm_top_ctrl_amm_0_0_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (hbm_top_ctrl_amm_0_0_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (hbm_top_ctrl_amm_0_0_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_data),                              //  output,  width = 405,       out.data
		.out_valid         (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated),                         
		.csr_read          (1'b0),                                                                      // (terminated),                         
		.csr_write         (1'b0),                                                                      // (terminated),                         
		.csr_readdata      (),                                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated),                         
		.almost_full_data  (),                                                                          // (terminated),                         
		.almost_empty_data (),                                                                          // (terminated),                         
		.in_empty          (1'b0),                                                                      // (terminated),                         
		.out_empty         (),                                                                          // (terminated),                         
		.in_error          (1'b0),                                                                      // (terminated),                         
		.out_error         (),                                                                          // (terminated),                         
		.in_channel        (1'b0),                                                                      // (terminated),                         
		.out_channel       ()                                                                           // (terminated),                         
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (394),
		.PKT_ORI_BURST_SIZE_L      (392),
		.PKT_RESPONSE_STATUS_H     (391),
		.PKT_RESPONSE_STATUS_L     (390),
		.PKT_BURST_SIZE_H          (373),
		.PKT_BURST_SIZE_L          (371),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (378),
		.PKT_PROTECTION_H          (385),
		.PKT_PROTECTION_L          (383),
		.PKT_BURSTWRAP_H           (370),
		.PKT_BURSTWRAP_L           (370),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (404),
		.AVS_BURSTCOUNT_W          (12),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) hbm_top_ctrl_amm_0_1_agent (
		.clk                     (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,             clk.clk
		.reset                   (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (hbm_top_ctrl_amm_0_1_agent_m0_address),                             //  output,   width = 64,              m0.address
		.m0_burstcount           (hbm_top_ctrl_amm_0_1_agent_m0_burstcount),                          //  output,   width = 12,                .burstcount
		.m0_byteenable           (hbm_top_ctrl_amm_0_1_agent_m0_byteenable),                          //  output,   width = 32,                .byteenable
		.m0_debugaccess          (hbm_top_ctrl_amm_0_1_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (hbm_top_ctrl_amm_0_1_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (hbm_top_ctrl_amm_0_1_agent_m0_readdata),                            //   input,  width = 256,                .readdata
		.m0_readdatavalid        (hbm_top_ctrl_amm_0_1_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (hbm_top_ctrl_amm_0_1_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (hbm_top_ctrl_amm_0_1_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (hbm_top_ctrl_amm_0_1_agent_m0_writedata),                           //  output,  width = 256,                .writedata
		.m0_write                (hbm_top_ctrl_amm_0_1_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (hbm_top_ctrl_amm_0_1_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (hbm_top_ctrl_amm_0_1_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (hbm_top_ctrl_amm_0_1_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (hbm_top_ctrl_amm_0_1_agent_rp_data),                                //  output,  width = 404,                .data
		.rp_startofpacket        (hbm_top_ctrl_amm_0_1_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                              //   input,  width = 404,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                           //   input,    width = 2,                .channel
		.rf_sink_ready           (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_data),                      //   input,  width = 405,                .data
		.rf_source_ready         (hbm_top_ctrl_amm_0_1_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (hbm_top_ctrl_amm_0_1_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (hbm_top_ctrl_amm_0_1_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (hbm_top_ctrl_amm_0_1_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (hbm_top_ctrl_amm_0_1_agent_rf_source_data),                         //  output,  width = 405,                .data
		.rdata_fifo_sink_ready   (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_data),                    //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (hbm_top_ctrl_amm_0_1_agent_rdata_fifo_src_data),                    //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (405),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) hbm_top_ctrl_amm_0_1_agent_rsp_fifo (
		.clk               (hbm_top_wmc_clk_0_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (hbm_top_ctrl_amm_0_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (hbm_top_ctrl_amm_0_1_agent_rf_source_data),                                 //   input,  width = 405,        in.data
		.in_valid          (hbm_top_ctrl_amm_0_1_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (hbm_top_ctrl_amm_0_1_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (hbm_top_ctrl_amm_0_1_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (hbm_top_ctrl_amm_0_1_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_data),                              //  output,  width = 405,       out.data
		.out_valid         (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (hbm_top_ctrl_amm_0_1_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated),                         
		.csr_read          (1'b0),                                                                      // (terminated),                         
		.csr_write         (1'b0),                                                                      // (terminated),                         
		.csr_readdata      (),                                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated),                         
		.almost_full_data  (),                                                                          // (terminated),                         
		.almost_empty_data (),                                                                          // (terminated),                         
		.in_empty          (1'b0),                                                                      // (terminated),                         
		.out_empty         (),                                                                          // (terminated),                         
		.in_error          (1'b0),                                                                      // (terminated),                         
		.out_error         (),                                                                          // (terminated),                         
		.in_channel        (1'b0),                                                                      // (terminated),                         
		.out_channel       ()                                                                           // (terminated),                         
	);

	qsys_top_altera_merlin_router_1921_e3di2yi router (
		.sink_ready         (ch_0_0_master_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (ch_0_0_master_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (ch_0_0_master_m0_agent_cp_data),                                //   input,  width = 404,          .data
		.sink_startofpacket (ch_0_0_master_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ch_0_0_master_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                              //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                               //  output,  width = 404,          .data
		.src_channel        (router_src_channel),                                            //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_mlccsda router_001 (
		.sink_ready         (ch_0_1_master_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (ch_0_1_master_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (ch_0_1_master_m0_agent_cp_data),                                //   input,  width = 404,          .data
		.sink_startofpacket (ch_0_1_master_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ch_0_1_master_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                           //  output,  width = 404,          .data
		.src_channel        (router_001_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_kkqq5lq router_002 (
		.sink_ready         (hbm_top_ctrl_amm_0_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (hbm_top_ctrl_amm_0_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (hbm_top_ctrl_amm_0_0_agent_rp_data),                                //   input,  width = 404,          .data
		.sink_startofpacket (hbm_top_ctrl_amm_0_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hbm_top_ctrl_amm_0_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                              //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                               //  output,  width = 404,          .data
		.src_channel        (router_002_src_channel),                                            //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_bi23ntq router_003 (
		.sink_ready         (hbm_top_ctrl_amm_0_1_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (hbm_top_ctrl_amm_0_1_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (hbm_top_ctrl_amm_0_1_agent_rp_data),                                //   input,  width = 404,          .data
		.sink_startofpacket (hbm_top_ctrl_amm_0_1_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hbm_top_ctrl_amm_0_1_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                              //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                               //  output,  width = 404,          .data
		.src_channel        (router_003_src_channel),                                            //  output,    width = 2,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (381),
		.PKT_DEST_ID_L             (381),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (380),
		.PKT_BYTE_CNT_H            (369),
		.PKT_BYTE_CNT_L            (358),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.MAX_OUTSTANDING_RESPONSES (128),
		.PIPELINED                 (0),
		.ST_DATA_W                 (404),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) ch_0_1_master_m0_limiter (
		.clk                    (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset                  (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                           //   input,  width = 404,          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (ch_0_1_master_m0_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (ch_0_1_master_m0_limiter_cmd_src_data),                         //  output,  width = 404,          .data
		.cmd_src_channel        (ch_0_1_master_m0_limiter_cmd_src_channel),                      //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (ch_0_1_master_m0_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (ch_0_1_master_m0_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                         //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                         //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                       //   input,    width = 2,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                          //   input,  width = 404,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (ch_0_1_master_m0_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (ch_0_1_master_m0_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (ch_0_1_master_m0_limiter_rsp_src_data),                         //  output,  width = 404,          .data
		.rsp_src_channel        (ch_0_1_master_m0_limiter_rsp_src_channel),                      //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (ch_0_1_master_m0_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (ch_0_1_master_m0_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (ch_0_1_master_m0_limiter_cmd_valid_data)                        //  output,    width = 2, cmd_valid.data
	);

	qsys_top_altera_merlin_demultiplexer_1921_g5kdmwq cmd_demux (
		.clk                (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                            //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                               //   input,  width = 404,          .data
		.sink_startofpacket (router_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                              //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                          //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                          //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                           //  output,  width = 404,          .data
		.src0_channel       (cmd_demux_src0_channel),                                        //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_sohe52q cmd_demux_001 (
		.clk                (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,        clk.clk
		.reset              (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (ch_0_1_master_m0_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (ch_0_1_master_m0_limiter_cmd_src_channel),                      //   input,    width = 2,           .channel
		.sink_data          (ch_0_1_master_m0_limiter_cmd_src_data),                         //   input,  width = 404,           .data
		.sink_startofpacket (ch_0_1_master_m0_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (ch_0_1_master_m0_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (ch_0_1_master_m0_limiter_cmd_valid_data),                       //   input,    width = 2, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                      //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //  output,  width = 404,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //  output,    width = 2,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //  output,  width = 404,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //  output,    width = 2,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                 //  output,    width = 1,           .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_v64yxgq cmd_mux (
		.clk                 (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                  //  output,  width = 404,          .data
		.src_channel         (cmd_mux_src_channel),                                               //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                            //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                               //   input,  width = 404,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                        //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                           //   input,  width = 404,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                     //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_wiea3ja cmd_mux_001 (
		.clk                 (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                              //  output,  width = 404,          .data
		.src_channel         (cmd_mux_001_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_001_src1_data),                                           //   input,  width = 404,          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                                     //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_ch7epuq rsp_demux (
		.clk                (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                            //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                               //   input,  width = 404,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                               //  output,  width = 404,          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                               //  output,  width = 404,          .data
		.src1_channel       (rsp_demux_src1_channel),                                            //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_g5kdmwq rsp_demux_001 (
		.clk                (hbm_top_wmc_clk_0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (hbm_top_ctrl_amm_0_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                            //   input,    width = 2,          .channel
		.sink_data          (router_003_src_data),                                               //   input,  width = 404,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                           //  output,  width = 404,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                        //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_5b2cani rsp_mux (
		.clk                 (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                              //  output,  width = 404,          .data
		.src_channel         (rsp_mux_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                           //   input,  width = 404,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                     //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_dzszuiq rsp_mux_001 (
		.clk                 (hbm_top_wmc_clk_0_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (ch_0_0_master_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                         //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                          //  output,  width = 404,          .data
		.src_channel         (rsp_mux_001_src_channel),                                       //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                           //   input,  width = 404,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                       //   input,  width = 404,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

endmodule
