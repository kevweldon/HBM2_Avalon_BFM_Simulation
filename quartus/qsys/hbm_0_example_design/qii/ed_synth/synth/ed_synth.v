// ed_synth.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module ed_synth (
		input  wire       core_clk_iopll_ref_clk_clk,               //           core_clk_iopll_ref_clk.clk
		input  wire       core_clk_iopll_reset_reset,               //             core_clk_iopll_reset.reset
		input  wire       hbm_0_example_design_pll_ref_clk_clk,     // hbm_0_example_design_pll_ref_clk.clk
		input  wire       hbm_0_example_design_wmcrst_n_in_reset_n, // hbm_0_example_design_wmcrst_n_in.reset_n
		input  wire       hbm_only_reset_in_reset,                  //                hbm_only_reset_in.reset
		input  wire       m2u_bridge_cattrip,                       //                       m2u_bridge.cattrip
		input  wire [2:0] m2u_bridge_temp,                          //                                 .temp
		input  wire [7:0] m2u_bridge_wso,                           //                                 .wso
		output wire       m2u_bridge_reset_n,                       //                                 .reset_n
		output wire       m2u_bridge_wrst_n,                        //                                 .wrst_n
		output wire       m2u_bridge_wrck,                          //                                 .wrck
		output wire       m2u_bridge_shiftwr,                       //                                 .shiftwr
		output wire       m2u_bridge_capturewr,                     //                                 .capturewr
		output wire       m2u_bridge_updatewr,                      //                                 .updatewr
		output wire       m2u_bridge_selectwir,                     //                                 .selectwir
		output wire       m2u_bridge_wsi,                           //                                 .wsi
		output wire       tg0_0_status_traffic_gen_pass,            //                     tg0_0_status.traffic_gen_pass
		output wire       tg0_0_status_traffic_gen_fail,            //                                 .traffic_gen_fail
		output wire       tg0_0_status_traffic_gen_timeout,         //                                 .traffic_gen_timeout
		output wire       tg0_1_status_traffic_gen_pass,            //                     tg0_1_status.traffic_gen_pass
		output wire       tg0_1_status_traffic_gen_fail,            //                                 .traffic_gen_fail
		output wire       tg0_1_status_traffic_gen_timeout          //                                 .traffic_gen_timeout
	);

	wire          tg0_0_ctrl_amm_waitrequest;                                             // hbm_0_example_design:ctrl_amm_0_0_waitrequest_n -> tg0_0:amm_ready
	wire  [255:0] tg0_0_ctrl_amm_readdata;                                                // hbm_0_example_design:ctrl_amm_0_0_readdata -> tg0_0:amm_readdata
	wire          tg0_0_ctrl_amm_read;                                                    // tg0_0:amm_read -> hbm_0_example_design:ctrl_amm_0_0_read
	wire   [28:0] tg0_0_ctrl_amm_address;                                                 // tg0_0:amm_address -> hbm_0_example_design:ctrl_amm_0_0_address
	wire   [31:0] tg0_0_ctrl_amm_byteenable;                                              // tg0_0:amm_byteenable -> hbm_0_example_design:ctrl_amm_0_0_byteenable
	wire          tg0_0_ctrl_amm_readdatavalid;                                           // hbm_0_example_design:ctrl_amm_0_0_readdatavalid -> tg0_0:amm_readdatavalid
	wire          tg0_0_ctrl_amm_write;                                                   // tg0_0:amm_write -> hbm_0_example_design:ctrl_amm_0_0_write
	wire  [255:0] tg0_0_ctrl_amm_writedata;                                               // tg0_0:amm_writedata -> hbm_0_example_design:ctrl_amm_0_0_writedata
	wire    [6:0] tg0_0_ctrl_amm_burstcount;                                              // tg0_0:amm_burstcount -> hbm_0_example_design:ctrl_amm_0_0_burstcount
	wire          tg0_1_ctrl_amm_waitrequest;                                             // hbm_0_example_design:ctrl_amm_0_1_waitrequest_n -> tg0_1:amm_ready
	wire  [255:0] tg0_1_ctrl_amm_readdata;                                                // hbm_0_example_design:ctrl_amm_0_1_readdata -> tg0_1:amm_readdata
	wire          tg0_1_ctrl_amm_read;                                                    // tg0_1:amm_read -> hbm_0_example_design:ctrl_amm_0_1_read
	wire   [28:0] tg0_1_ctrl_amm_address;                                                 // tg0_1:amm_address -> hbm_0_example_design:ctrl_amm_0_1_address
	wire   [31:0] tg0_1_ctrl_amm_byteenable;                                              // tg0_1:amm_byteenable -> hbm_0_example_design:ctrl_amm_0_1_byteenable
	wire          tg0_1_ctrl_amm_readdatavalid;                                           // hbm_0_example_design:ctrl_amm_0_1_readdatavalid -> tg0_1:amm_readdatavalid
	wire          tg0_1_ctrl_amm_write;                                                   // tg0_1:amm_write -> hbm_0_example_design:ctrl_amm_0_1_write
	wire  [255:0] tg0_1_ctrl_amm_writedata;                                               // tg0_1:amm_writedata -> hbm_0_example_design:ctrl_amm_0_1_writedata
	wire    [6:0] tg0_1_ctrl_amm_burstcount;                                              // tg0_1:amm_burstcount -> hbm_0_example_design:ctrl_amm_0_1_burstcount
	wire          core_clk_iopll_outclk0_clk;                                             // core_clk_iopll:outclk_0 -> hbm_0_example_design:ext_core_clk
	wire          hbm_0_example_design_wmc_clk_0_clk;                                     // hbm_0_example_design:wmc_clk_0_clk -> [tg0_0:wmc_clk_in, tg0_1:wmc_clk_in]
	wire    [1:0] tg0_0_apb_ur_pstrb;                                                     // tg0_0:ur_pstrb -> hbm_0_example_design:apb_0_ur_pstrb
	wire   [15:0] tg0_0_apb_ur_pwdata;                                                    // tg0_0:ur_pwdata -> hbm_0_example_design:apb_0_ur_pwdata
	wire          tg0_0_apb_ur_penable;                                                   // tg0_0:ur_penable -> hbm_0_example_design:apb_0_ur_penable
	wire   [15:0] tg0_0_apb_ur_paddr;                                                     // tg0_0:ur_paddr -> hbm_0_example_design:apb_0_ur_paddr
	wire          tg0_0_apb_ur_psel;                                                      // tg0_0:ur_psel -> hbm_0_example_design:apb_0_ur_psel
	wire          tg0_0_apb_ur_pwrite;                                                    // tg0_0:ur_pwrite -> hbm_0_example_design:apb_0_ur_pwrite
	wire          hbm_0_example_design_apb_0_ur_prready;                                  // hbm_0_example_design:apb_0_ur_prready -> tg0_0:ur_prready
	wire   [15:0] hbm_0_example_design_apb_0_ur_prdata;                                   // hbm_0_example_design:apb_0_ur_prdata -> tg0_0:ur_prdata
	wire          hbm_0_example_design_ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror; // hbm_0_example_design:ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror -> tg0_0:ctrl_ecc_readdataerror
	wire          hbm_0_example_design_ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror; // hbm_0_example_design:ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror -> tg0_1:ctrl_ecc_readdataerror
	wire          core_clk_iopll_locked_export;                                           // core_clk_iopll:locked -> hbm_0_example_design:ext_core_clk_locked
	wire          reset_release_ip_ninit_done_ninit_done;                                 // reset_release_ip:ninit_done -> ninit_done_splitter:sig_input
	wire          ninit_done_splitter_sig_output_if_0_ninit_done;                         // ninit_done_splitter:sig_output_0 -> tg0_0:ninit_done
	wire          ninit_done_splitter_sig_output_if_1_ninit_done;                         // ninit_done_splitter:sig_output_1 -> tg0_1:ninit_done
	wire          hbm_0_example_design_wmcrst_n_0_reset;                                  // hbm_0_example_design:wmcrst_n_0_reset_n -> [tg0_0:wmcrst_n_in, tg0_1:wmcrst_n_in]

	ed_synth_core_clk_iopll core_clk_iopll (
		.refclk   (core_clk_iopll_ref_clk_clk),   //   input,  width = 1,  refclk.clk
		.locked   (core_clk_iopll_locked_export), //  output,  width = 1,  locked.export
		.rst      (core_clk_iopll_reset_reset),   //   input,  width = 1,   reset.reset
		.outclk_0 (core_clk_iopll_outclk0_clk)    //  output,  width = 1, outclk0.clk
	);

	ed_synth_hbm_0_example_design hbm_0_example_design (
		.pll_ref_clk                                       (hbm_0_example_design_pll_ref_clk_clk),                                   //   input,    width = 1,                pll_ref_clk.clk
		.ext_core_clk                                      (core_clk_iopll_outclk0_clk),                                             //   input,    width = 1,               ext_core_clk.clk
		.ext_core_clk_locked                               (core_clk_iopll_locked_export),                                           //   input,    width = 1,        ext_core_clk_locked.export
		.wmcrst_n_in                                       (hbm_0_example_design_wmcrst_n_in_reset_n),                               //   input,    width = 1,                wmcrst_n_in.reset_n
		.hbm_only_reset_in                                 (hbm_only_reset_in_reset),                                                //   input,    width = 1,          hbm_only_reset_in.reset
		.local_cal_success                                 (),                                                                       //  output,    width = 1,                     status.local_cal_success
		.local_cal_fail                                    (),                                                                       //  output,    width = 1,                           .local_cal_fail
		.cal_lat                                           (),                                                                       //  output,    width = 3,                    cal_lat.cal_lat
		.ck_t_0                                            (),                                                                       //  output,    width = 1,                      mem_0.ck_t
		.ck_c_0                                            (),                                                                       //  output,    width = 1,                           .ck_c
		.cke_0                                             (),                                                                       //  output,    width = 1,                           .cke
		.c_0                                               (),                                                                       //  output,    width = 8,                           .c
		.r_0                                               (),                                                                       //  output,    width = 6,                           .r
		.dq_0                                              (),                                                                       //   inout,  width = 128,                           .dq
		.dm_0                                              (),                                                                       //   inout,   width = 16,                           .dm
		.dbi_0                                             (),                                                                       //   inout,   width = 16,                           .dbi
		.par_0                                             (),                                                                       //   inout,    width = 4,                           .par
		.derr_0                                            (),                                                                       //   inout,    width = 4,                           .derr
		.rdqs_t_0                                          (),                                                                       //   input,    width = 4,                           .rdqs_t
		.rdqs_c_0                                          (),                                                                       //   input,    width = 4,                           .rdqs_c
		.wdqs_t_0                                          (),                                                                       //  output,    width = 4,                           .wdqs_t
		.wdqs_c_0                                          (),                                                                       //  output,    width = 4,                           .wdqs_c
		.rd_0                                              (),                                                                       //   inout,    width = 8,                           .rd
		.rr_0                                              (),                                                                       //  output,    width = 1,                           .rr
		.rc_0                                              (),                                                                       //  output,    width = 1,                           .rc
		.aerr_0                                            (),                                                                       //   input,    width = 1,                           .aerr
		.cattrip                                           (m2u_bridge_cattrip),                                                     //   input,    width = 1,                 m2u_bridge.cattrip
		.temp                                              (m2u_bridge_temp),                                                        //   input,    width = 3,                           .temp
		.wso                                               (m2u_bridge_wso),                                                         //   input,    width = 8,                           .wso
		.reset_n                                           (m2u_bridge_reset_n),                                                     //  output,    width = 1,                           .reset_n
		.wrst_n                                            (m2u_bridge_wrst_n),                                                      //  output,    width = 1,                           .wrst_n
		.wrck                                              (m2u_bridge_wrck),                                                        //  output,    width = 1,                           .wrck
		.shiftwr                                           (m2u_bridge_shiftwr),                                                     //  output,    width = 1,                           .shiftwr
		.capturewr                                         (m2u_bridge_capturewr),                                                   //  output,    width = 1,                           .capturewr
		.updatewr                                          (m2u_bridge_updatewr),                                                    //  output,    width = 1,                           .updatewr
		.selectwir                                         (m2u_bridge_selectwir),                                                   //  output,    width = 1,                           .selectwir
		.wsi                                               (m2u_bridge_wsi),                                                         //  output,    width = 1,                           .wsi
		.wmc_clk_0_clk                                     (hbm_0_example_design_wmc_clk_0_clk),                                     //  output,    width = 1,                  wmc_clk_0.clk
		.phy_clk_0_clk                                     (),                                                                       //  output,    width = 1,                  phy_clk_0.clk
		.wmcrst_n_0_reset_n                                (hbm_0_example_design_wmcrst_n_0_reset),                                  //  output,    width = 1,                 wmcrst_n_0.reset_n
		.ctrl_amm_0_1_waitrequest_n                        (tg0_1_ctrl_amm_waitrequest),                                             //  output,    width = 1,               ctrl_amm_0_1.waitrequest_n
		.ctrl_amm_0_1_read                                 (tg0_1_ctrl_amm_read),                                                    //   input,    width = 1,                           .read
		.ctrl_amm_0_1_write                                (tg0_1_ctrl_amm_write),                                                   //   input,    width = 1,                           .write
		.ctrl_amm_0_1_address                              (tg0_1_ctrl_amm_address),                                                 //   input,   width = 29,                           .address
		.ctrl_amm_0_1_readdata                             (tg0_1_ctrl_amm_readdata),                                                //  output,  width = 256,                           .readdata
		.ctrl_amm_0_1_writedata                            (tg0_1_ctrl_amm_writedata),                                               //   input,  width = 256,                           .writedata
		.ctrl_amm_0_1_burstcount                           (tg0_1_ctrl_amm_burstcount),                                              //   input,    width = 7,                           .burstcount
		.ctrl_amm_0_1_byteenable                           (tg0_1_ctrl_amm_byteenable),                                              //   input,   width = 32,                           .byteenable
		.ctrl_amm_0_1_readdatavalid                        (tg0_1_ctrl_amm_readdatavalid),                                           //  output,    width = 1,                           .readdatavalid
		.ctrl_amm_0_0_waitrequest_n                        (tg0_0_ctrl_amm_waitrequest),                                             //  output,    width = 1,               ctrl_amm_0_0.waitrequest_n
		.ctrl_amm_0_0_read                                 (tg0_0_ctrl_amm_read),                                                    //   input,    width = 1,                           .read
		.ctrl_amm_0_0_write                                (tg0_0_ctrl_amm_write),                                                   //   input,    width = 1,                           .write
		.ctrl_amm_0_0_address                              (tg0_0_ctrl_amm_address),                                                 //   input,   width = 29,                           .address
		.ctrl_amm_0_0_readdata                             (tg0_0_ctrl_amm_readdata),                                                //  output,  width = 256,                           .readdata
		.ctrl_amm_0_0_writedata                            (tg0_0_ctrl_amm_writedata),                                               //   input,  width = 256,                           .writedata
		.ctrl_amm_0_0_burstcount                           (tg0_0_ctrl_amm_burstcount),                                              //   input,    width = 7,                           .burstcount
		.ctrl_amm_0_0_byteenable                           (tg0_0_ctrl_amm_byteenable),                                              //   input,   width = 32,                           .byteenable
		.ctrl_amm_0_0_readdatavalid                        (tg0_0_ctrl_amm_readdatavalid),                                           //  output,    width = 1,                           .readdatavalid
		.ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror (hbm_0_example_design_ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror), //  output,    width = 1, ctrl_ecc_readdataerror_0_1.ctrl_ecc_readdataerror
		.ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror (hbm_0_example_design_ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror), //  output,    width = 1, ctrl_ecc_readdataerror_0_0.ctrl_ecc_readdataerror
		.apb_0_ur_paddr                                    (tg0_0_apb_ur_paddr),                                                     //   input,   width = 16,                      apb_0.ur_paddr
		.apb_0_ur_psel                                     (tg0_0_apb_ur_psel),                                                      //   input,    width = 1,                           .ur_psel
		.apb_0_ur_penable                                  (tg0_0_apb_ur_penable),                                                   //   input,    width = 1,                           .ur_penable
		.apb_0_ur_pwrite                                   (tg0_0_apb_ur_pwrite),                                                    //   input,    width = 1,                           .ur_pwrite
		.apb_0_ur_pwdata                                   (tg0_0_apb_ur_pwdata),                                                    //   input,   width = 16,                           .ur_pwdata
		.apb_0_ur_pstrb                                    (tg0_0_apb_ur_pstrb),                                                     //   input,    width = 2,                           .ur_pstrb
		.apb_0_ur_prready                                  (hbm_0_example_design_apb_0_ur_prready),                                  //  output,    width = 1,                           .ur_prready
		.apb_0_ur_prdata                                   (hbm_0_example_design_apb_0_ur_prdata)                                    //  output,   width = 16,                           .ur_prdata
	);

	ed_synth_ninit_done_splitter ninit_done_splitter (
		.sig_input    (reset_release_ip_ninit_done_ninit_done),         //   input,  width = 1,    sig_input_if.ninit_done
		.sig_output_0 (ninit_done_splitter_sig_output_if_0_ninit_done), //  output,  width = 1, sig_output_if_0.ninit_done
		.sig_output_1 (ninit_done_splitter_sig_output_if_1_ninit_done)  //  output,  width = 1, sig_output_if_1.ninit_done
	);

	ed_synth_reset_release_ip reset_release_ip (
		.ninit_done (reset_release_ip_ninit_done_ninit_done)  //  output,  width = 1, ninit_done.ninit_done
	);

	ed_synth_tg0_0 tg0_0 (
		.ninit_done             (ninit_done_splitter_sig_output_if_0_ninit_done),                         //   input,    width = 1,             ninit_done.ninit_done
		.wmc_clk_in             (hbm_0_example_design_wmc_clk_0_clk),                                     //   input,    width = 1,             wmc_clk_in.clk
		.wmcrst_n_in            (hbm_0_example_design_wmcrst_n_0_reset),                                  //   input,    width = 1,            wmcrst_n_in.reset_n
		.amm_ready              (tg0_0_ctrl_amm_waitrequest),                                             //   input,    width = 1,               ctrl_amm.waitrequest_n
		.amm_read               (tg0_0_ctrl_amm_read),                                                    //  output,    width = 1,                       .read
		.amm_write              (tg0_0_ctrl_amm_write),                                                   //  output,    width = 1,                       .write
		.amm_address            (tg0_0_ctrl_amm_address),                                                 //  output,   width = 29,                       .address
		.amm_readdata           (tg0_0_ctrl_amm_readdata),                                                //   input,  width = 256,                       .readdata
		.amm_writedata          (tg0_0_ctrl_amm_writedata),                                               //  output,  width = 256,                       .writedata
		.amm_burstcount         (tg0_0_ctrl_amm_burstcount),                                              //  output,    width = 7,                       .burstcount
		.amm_byteenable         (tg0_0_ctrl_amm_byteenable),                                              //  output,   width = 32,                       .byteenable
		.amm_readdatavalid      (tg0_0_ctrl_amm_readdatavalid),                                           //   input,    width = 1,                       .readdatavalid
		.traffic_gen_pass       (tg0_0_status_traffic_gen_pass),                                          //  output,    width = 1,              tg_status.traffic_gen_pass
		.traffic_gen_fail       (tg0_0_status_traffic_gen_fail),                                          //  output,    width = 1,                       .traffic_gen_fail
		.traffic_gen_timeout    (tg0_0_status_traffic_gen_timeout),                                       //  output,    width = 1,                       .traffic_gen_timeout
		.ctrl_ecc_readdataerror (hbm_0_example_design_ctrl_ecc_readdataerror_0_0_ctrl_ecc_readdataerror), //   input,    width = 1, ctrl_ecc_readdataerror.ctrl_ecc_readdataerror
		.ur_paddr               (tg0_0_apb_ur_paddr),                                                     //  output,   width = 16,                    apb.ur_paddr
		.ur_psel                (tg0_0_apb_ur_psel),                                                      //  output,    width = 1,                       .ur_psel
		.ur_penable             (tg0_0_apb_ur_penable),                                                   //  output,    width = 1,                       .ur_penable
		.ur_pwrite              (tg0_0_apb_ur_pwrite),                                                    //  output,    width = 1,                       .ur_pwrite
		.ur_pwdata              (tg0_0_apb_ur_pwdata),                                                    //  output,   width = 16,                       .ur_pwdata
		.ur_pstrb               (tg0_0_apb_ur_pstrb),                                                     //  output,    width = 2,                       .ur_pstrb
		.ur_prready             (hbm_0_example_design_apb_0_ur_prready),                                  //   input,    width = 1,                       .ur_prready
		.ur_prdata              (hbm_0_example_design_apb_0_ur_prdata)                                    //   input,   width = 16,                       .ur_prdata
	);

	ed_synth_tg0_1 tg0_1 (
		.ninit_done             (ninit_done_splitter_sig_output_if_1_ninit_done),                         //   input,    width = 1,             ninit_done.ninit_done
		.wmc_clk_in             (hbm_0_example_design_wmc_clk_0_clk),                                     //   input,    width = 1,             wmc_clk_in.clk
		.wmcrst_n_in            (hbm_0_example_design_wmcrst_n_0_reset),                                  //   input,    width = 1,            wmcrst_n_in.reset_n
		.amm_ready              (tg0_1_ctrl_amm_waitrequest),                                             //   input,    width = 1,               ctrl_amm.waitrequest_n
		.amm_read               (tg0_1_ctrl_amm_read),                                                    //  output,    width = 1,                       .read
		.amm_write              (tg0_1_ctrl_amm_write),                                                   //  output,    width = 1,                       .write
		.amm_address            (tg0_1_ctrl_amm_address),                                                 //  output,   width = 29,                       .address
		.amm_readdata           (tg0_1_ctrl_amm_readdata),                                                //   input,  width = 256,                       .readdata
		.amm_writedata          (tg0_1_ctrl_amm_writedata),                                               //  output,  width = 256,                       .writedata
		.amm_burstcount         (tg0_1_ctrl_amm_burstcount),                                              //  output,    width = 7,                       .burstcount
		.amm_byteenable         (tg0_1_ctrl_amm_byteenable),                                              //  output,   width = 32,                       .byteenable
		.amm_readdatavalid      (tg0_1_ctrl_amm_readdatavalid),                                           //   input,    width = 1,                       .readdatavalid
		.traffic_gen_pass       (tg0_1_status_traffic_gen_pass),                                          //  output,    width = 1,              tg_status.traffic_gen_pass
		.traffic_gen_fail       (tg0_1_status_traffic_gen_fail),                                          //  output,    width = 1,                       .traffic_gen_fail
		.traffic_gen_timeout    (tg0_1_status_traffic_gen_timeout),                                       //  output,    width = 1,                       .traffic_gen_timeout
		.ctrl_ecc_readdataerror (hbm_0_example_design_ctrl_ecc_readdataerror_0_1_ctrl_ecc_readdataerror)  //   input,    width = 1, ctrl_ecc_readdataerror.ctrl_ecc_readdataerror
	);

endmodule
