// ed_synth_tg0_1.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module ed_synth_tg0_1 (
		input  wire         ninit_done,             //             ninit_done.ninit_done
		input  wire         wmc_clk_in,             //             wmc_clk_in.clk
		input  wire         wmcrst_n_in,            //            wmcrst_n_in.reset_n
		input  wire         amm_ready,              //               ctrl_amm.waitrequest_n
		output wire         amm_read,               //                       .read
		output wire         amm_write,              //                       .write
		output wire [28:0]  amm_address,            //                       .address
		input  wire [255:0] amm_readdata,           //                       .readdata
		output wire [255:0] amm_writedata,          //                       .writedata
		output wire [6:0]   amm_burstcount,         //                       .burstcount
		output wire [31:0]  amm_byteenable,         //                       .byteenable
		input  wire         amm_readdatavalid,      //                       .readdatavalid
		output wire         traffic_gen_pass,       //              tg_status.traffic_gen_pass
		output wire         traffic_gen_fail,       //                       .traffic_gen_fail
		output wire         traffic_gen_timeout,    //                       .traffic_gen_timeout
		input  wire         ctrl_ecc_readdataerror  // ctrl_ecc_readdataerror.ctrl_ecc_readdataerror
	);

	altera_hbm_tg_avl_top #(
		.PROTOCOL_ENUM                      ("PROTOCOL_HBM"),
		.MMR_LINK                           (0),
		.MEGAFUNC_DEVICE_FAMILY             ("STRATIX 10"),
		.CTRL_AVL_PROTOCOL_ENUM             (""),
		.USE_AVL_BYTEEN                     (1),
		.AMM_WORD_ADDRESS_WIDTH             (24),
		.AMM_WORD_ADDRESS_DIVISIBLE_BY      (1),
		.AMM_BURST_COUNT_DIVISIBLE_BY       (1),
		.USE_SIMPLE_TG                      (0),
		.TEST_DURATION                      ("SHORT"),
		.DIAG_DEBUG_ISSPS                   (0),
		.USE_HARD_CTRL                      (1),
		.USE_MMR_EN                         (1),
		.DIAG_WR_PAR                        (0),
		.DIAG_RD_PAR                        (0),
		.DIAG_SBE_CORRECT                   (0),
		.USER_RFSH_ALL_EN                   (0),
		.CORE_CLK_FREQ_MHZ                  (300),
		.PORT_CTRL_AMM_ADDRESS_WIDTH        (29),
		.PORT_CTRL_AMM_RDATA_WIDTH          (256),
		.PORT_CTRL_AMM_WDATA_WIDTH          (256),
		.PORT_CTRL_AMM_BCOUNT_WIDTH         (7),
		.PORT_CTRL_AMM_BYTEEN_WIDTH         (32),
		.PORT_CTRL_MMR_MASTER_ADDRESS_WIDTH (10),
		.PORT_CTRL_MMR_MASTER_RDATA_WIDTH   (32),
		.PORT_CTRL_MMR_MASTER_WDATA_WIDTH   (32),
		.PORT_CTRL_MMR_MASTER_BCOUNT_WIDTH  (2),
		.PORT_APB_PADDR_WIDTH               (16),
		.PORT_APB_PWDATA_WIDTH              (16),
		.PORT_APB_PSTRB_WIDTH               (2),
		.PORT_APB_PRDATA_WIDTH              (16)
	) tg0_1 (
		.ninit_done                    (ninit_done),                           //   input,    width = 1,             ninit_done.ninit_done
		.wmc_clk_in                    (wmc_clk_in),                           //   input,    width = 1,             wmc_clk_in.clk
		.wmcrst_n_in                   (wmcrst_n_in),                          //   input,    width = 1,            wmcrst_n_in.reset_n
		.amm_ready                     (amm_ready),                            //   input,    width = 1,               ctrl_amm.waitrequest_n
		.amm_read                      (amm_read),                             //  output,    width = 1,                       .read
		.amm_write                     (amm_write),                            //  output,    width = 1,                       .write
		.amm_address                   (amm_address),                          //  output,   width = 29,                       .address
		.amm_readdata                  (amm_readdata),                         //   input,  width = 256,                       .readdata
		.amm_writedata                 (amm_writedata),                        //  output,  width = 256,                       .writedata
		.amm_burstcount                (amm_burstcount),                       //  output,    width = 7,                       .burstcount
		.amm_byteenable                (amm_byteenable),                       //  output,   width = 32,                       .byteenable
		.amm_readdatavalid             (amm_readdatavalid),                    //   input,    width = 1,                       .readdatavalid
		.traffic_gen_pass              (traffic_gen_pass),                     //  output,    width = 1,              tg_status.traffic_gen_pass
		.traffic_gen_fail              (traffic_gen_fail),                     //  output,    width = 1,                       .traffic_gen_fail
		.traffic_gen_timeout           (traffic_gen_timeout),                  //  output,    width = 1,                       .traffic_gen_timeout
		.ctrl_ecc_readdataerror        (ctrl_ecc_readdataerror),               //   input,    width = 1, ctrl_ecc_readdataerror.ctrl_ecc_readdataerror
		.ctrl_auto_precharge_req       (),                                     // (terminated),                                      
		.ctrl_user_priority_hi         (),                                     // (terminated),                                      
		.ctrl_ecc_user_interrupt       (1'b0),                                 // (terminated),                                      
		.mmr_master_waitrequest        (1'b0),                                 // (terminated),                                      
		.mmr_master_read               (),                                     // (terminated),                                      
		.mmr_master_write              (),                                     // (terminated),                                      
		.mmr_master_address            (),                                     // (terminated),                                      
		.mmr_master_readdata           (32'b00000000000000000000000000000000), // (terminated),                                      
		.mmr_master_writedata          (),                                     // (terminated),                                      
		.mmr_master_burstcount         (),                                     // (terminated),                                      
		.mmr_master_beginbursttransfer (),                                     // (terminated),                                      
		.mmr_master_readdatavalid      (1'b0),                                 // (terminated),                                      
		.ur_paddr                      (),                                     // (terminated),                                      
		.ur_psel                       (),                                     // (terminated),                                      
		.ur_penable                    (),                                     // (terminated),                                      
		.ur_pwrite                     (),                                     // (terminated),                                      
		.ur_pwdata                     (),                                     // (terminated),                                      
		.ur_pstrb                      (),                                     // (terminated),                                      
		.ur_prready                    (1'b0),                                 // (terminated),                                      
		.ur_prdata                     (16'b0000000000000000)                  // (terminated),                                      
	);

endmodule
